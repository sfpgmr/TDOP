/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleIndices = { Start: 0 },
      peg$startRuleIndex   = 0,

      peg$consts = [
        function(program) { return {scope:scope,program:program}; },
        peg$anyExpectation(),
        peg$otherExpectation("whitespace"),
        "\t",
        peg$literalExpectation("\t", false),
        "\x0B",
        peg$literalExpectation("\x0B", false),
        "\f",
        peg$literalExpectation("\f", false),
        " ",
        peg$literalExpectation(" ", false),
        "\xA0",
        peg$literalExpectation("\xA0", false),
        "\uFEFF",
        peg$literalExpectation("\uFEFF", false),
        /^[\n\r\u2028\u2029]/,
        peg$classExpectation(["\n", "\r", "\u2028", "\u2029"], false, false),
        peg$otherExpectation("end of line"),
        "\n",
        peg$literalExpectation("\n", false),
        "\r\n",
        peg$literalExpectation("\r\n", false),
        "\r",
        peg$literalExpectation("\r", false),
        "\u2028",
        peg$literalExpectation("\u2028", false),
        "\u2029",
        peg$literalExpectation("\u2029", false),
        peg$otherExpectation("comment"),
        "/*",
        peg$literalExpectation("/*", false),
        "*/",
        peg$literalExpectation("*/", false),
        "//",
        peg$literalExpectation("//", false),
        function(name) { return name; },
        peg$otherExpectation("identifier"),
        function(head, tail) {
              let ret = {
                nodeType: "Identifier",
                name: head + tail.join("")
              };
              ret.declaration = scope.find(ret.name);
              return ret;
            },
        "$",
        peg$literalExpectation("$", false),
        "_",
        peg$literalExpectation("_", false),
        "\\",
        peg$literalExpectation("\\", false),
        function(sequence) { return sequence; },
        "\u200C",
        peg$literalExpectation("\u200C", false),
        "\u200D",
        peg$literalExpectation("\u200D", false),
        function() { return { nodeType: "Literal", value: null }; },
        function() { return { nodeType: "Literal", value: true  }; },
        function() { return { nodeType: "Literal", value: false }; },
        peg$otherExpectation("number"),
        function(literal) {
              return literal;
            },
        ".",
        peg$literalExpectation(".", false),
        function(sign, floatValue, byteSizeSuffix) {
              byteSizeSuffix = byteSizeSuffix || 'd';
        			sign = sign || '+';
              const type = byteSizeSuffixMap.get(byteSizeSuffix).f;
              const value = parseFloat(floatValue);
              const wasmCode = wasmModule[type.name].const(value);

              return { 
                nodeType: "Literal",
                type:type,
                value: value,
               // wasmCode:wasmCode
              };
            },
        function(sign, intValue, byteSizeSuffix, unsigned) {
              byteSizeSuffix = byteSizeSuffix || 'd';
        			unsigned = unsigned || 'i';
              const type = byteSizeSuffixMap.get(byteSizeSuffix)[unsigned];
        			let value,wasmCode;
        			if(type.byteSize == 64){
        				value = hexToInt64(decimalToHex(intValue),sign);
                wasmCode = wasmModule.i64.const(value.low,value.high);
        			} else {
        				value = parseInt((sign||'') + intValue,10);
                wasmCode = wasmModule.i32.const(value);
        			}
              return { 
        				nodeType: "Literal",
        				type:type, 
        				value: value,
                //wasmCode:wasmCode
        			};
          },
        "0",
        peg$literalExpectation("0", false),
        /^[0-9]/,
        peg$classExpectation([["0", "9"]], false, false),
        /^[1-9]/,
        peg$classExpectation([["1", "9"]], false, false),
        "e",
        peg$literalExpectation("e", true),
        /^[+\-]/,
        peg$classExpectation(["+", "-"], false, false),
        "0x",
        peg$literalExpectation("0x", true),
        "x",
        peg$literalExpectation("x", true),
        function(sign, hex, byteSize, suffix) { 

          const byteSizeSuffix = byteSizeSuffixMap.get(byteSize || 'd');//
          const type = byteSizeSuffix[suffix || 'i']; 
          let value,wasmCode;

          let h = hex.filter(d=>{
            return (/[0-9a-f]/i).test(d);
          }).join('');

          if(h.length > type.byteSize * 2){
            error('型の最大値を超えています。');
          }

          if(suffix == 'u' && sign == '-'){
            error('符号なしリテラルにマイナス値は指定できません。');
          }

          if(suffix == 'f'){
            // 浮動小数点数値
            if(type.bitSize == 64){
              let low = parseInt(h.slice(-8),16) | 0;
              let high = parseInt(h.slice(0,-8),16) | 0;
              value = lib.i64tof64(low,high,sign == '-' ? 0x80000000 : 0);
              // wasmCode = wasmModule.f64.const(value);
            } else if(type.bitSize == 32) {
              value = parseInt(h,16) | 0;
              value = lib.i32tof32(value,sign == '-' ? 0x80000000 : 0);
              //wasmCode = wasmModule.f32.const(value);
            } else {
              error('このサイズの16進浮動小数リテラルはサポートしていません。');
            }
          } else {
            if(type.bitSize == 64){
        			value = hexToInt64(h);
              //wasmCode = wasmModule.i64.const(value);
            } else {
              sign = sign || '';
              value = parseInt(sign + h,16);
              //wasmCode = wasmModule.i32.const(value);
            }
          }

          return { 
            value:value,
            type:type,
            unsigned:suffix == 'u',
            byteSize:type.byteSize,
            bitSize:type.bitSize,
        		integer:suffix != 'f',
            wasmCode:wasmCode
          };

        },
        /^[0-9a-f]/i,
        peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
        "0b",
        peg$literalExpectation("0b", true),
        "b",
        peg$literalExpectation("b", true),
        function(sign, binary, byteSize, suffix) {

          sign = sign  || '+';
          const byteSuffix = byteSizeSuffixMap.get(byteSize || 'd');
          const type = byteSuffix[suffix || 'i']; 
          let b = binary.filter(d=>{
            return (d == '0' || d == '1') 
          }).join('');

          if(b.length > type.bitSize){
            error('型の最大ビット数を超えています。');
          }

          if(suffix == 'u' && sign == '-'){
            error('符号なしリテラルにマイナス値は指定できません。');
          }

          let value,wasmCode;

        		
          if(suffix == 'f'){
            // 浮動小数点数値
            if(type.bitSize == 64){
              let low = parseInt(b.slice(-32),2) | 0;
              let high = parseInt(b.slice(0,-32),2) | 0;
              value = lib.i64tof64(low,high,sign == '-' ? 0x80000000 : 0);
              //wasmCode = wasmModule.f64.const(value);
            } else if(type.bitSize == 32) {
              value = parseInt(b,2) | 0;
              value = lib.i32tof32(value,sign == '-' ? 0x80000000 : 0);
              //wasmCode = wasmModule.f32.const(value);
            } else {
              error('このサイズの2進浮動小数リテラルはサポートしていません。');
            }
          } else {
        		if(type.bitSize == 64){
        			let low = parseInt(b.slice(-32),2) | 0;
        			let high = parseInt(b.slice(0,-32),2) | 0;
        			value = {low:low,high:high};
        			if(sign == '-'){
        				lib.i64Neg(low,high);
        				let ret = new Uint32Array(lib.memory.buffer);
        				value.low = ret[0];
        				value.high = ret[1];
        			}
              //wasmCode = wasmModule.i64.const(value.low,value.high);
        		} else {
        			value = parseInt(sign + b,2);
              //wasmCode = wasmModule.i32.const(value);
        		}
        	}

          return { 
            value:value,
            type:type,
            unsigned:suffix == 'u',
            byteSize:type.byteSize,
            bitSize:type.bitSize,
        		integer:suffix != 'f',
            wasmCode:wasmCode
          };
        },
        /^[01]/,
        peg$classExpectation(["0", "1"], false, false),
        "s",
        peg$literalExpectation("s", false),
        "w",
        peg$literalExpectation("w", false),
        "d",
        peg$literalExpectation("d", false),
        "l",
        peg$literalExpectation("l", false),
        "u",
        peg$literalExpectation("u", false),
        "f",
        peg$literalExpectation("f", false),
        peg$otherExpectation("string"),
        "\"",
        peg$literalExpectation("\"", false),
        function(chars) {
              return { nodeType: "Literal", value: chars.join("") };
            },
        "'",
        peg$literalExpectation("'", false),
        function() { return text(); },
        function() { return ""; },
        function() { return "\0"; },
        peg$literalExpectation("b", false),
        function() { return "\b"; },
        function() { return "\f"; },
        "n",
        peg$literalExpectation("n", false),
        function() { return "\n"; },
        "r",
        peg$literalExpectation("r", false),
        function() { return "\r"; },
        "t",
        peg$literalExpectation("t", false),
        function() { return "\t"; },
        "v",
        peg$literalExpectation("v", false),
        function() { return "\v"; },
        peg$literalExpectation("x", false),
        function(digits) {
              return String.fromCharCode(parseInt(digits, 16));
            },
        peg$otherExpectation("regular expression"),
        "/",
        peg$literalExpectation("/", false),
        function(pattern, flags) {
              var value;

              try {
                value = new RegExp(pattern, flags);
              } catch (e) {
                error(e.message);
              }

              return { nodeType: "Literal", value: value };
            },
        /^[*\\\/[]/,
        peg$classExpectation(["*", "\\", "/", "["], false, false),
        /^[\\\/[]/,
        peg$classExpectation(["\\", "/", "["], false, false),
        "[",
        peg$literalExpectation("[", false),
        "]",
        peg$literalExpectation("]", false),
        /^[\]\\]/,
        peg$classExpectation(["]", "\\"], false, false),
        /^[a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137-\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148-\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C-\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA-\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9-\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC-\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF-\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F-\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0-\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB-\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE-\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6-\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FC7\u1FD0-\u1FD3\u1FD6-\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6-\u1FF7\u210A\u210E-\u210F\u2113\u212F\u2134\u2139\u213C-\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65-\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73-\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3-\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]/,
        peg$classExpectation([["a", "z"], "\xB5", ["\xDF", "\xF6"], ["\xF8", "\xFF"], "\u0101", "\u0103", "\u0105", "\u0107", "\u0109", "\u010B", "\u010D", "\u010F", "\u0111", "\u0113", "\u0115", "\u0117", "\u0119", "\u011B", "\u011D", "\u011F", "\u0121", "\u0123", "\u0125", "\u0127", "\u0129", "\u012B", "\u012D", "\u012F", "\u0131", "\u0133", "\u0135", ["\u0137", "\u0138"], "\u013A", "\u013C", "\u013E", "\u0140", "\u0142", "\u0144", "\u0146", ["\u0148", "\u0149"], "\u014B", "\u014D", "\u014F", "\u0151", "\u0153", "\u0155", "\u0157", "\u0159", "\u015B", "\u015D", "\u015F", "\u0161", "\u0163", "\u0165", "\u0167", "\u0169", "\u016B", "\u016D", "\u016F", "\u0171", "\u0173", "\u0175", "\u0177", "\u017A", "\u017C", ["\u017E", "\u0180"], "\u0183", "\u0185", "\u0188", ["\u018C", "\u018D"], "\u0192", "\u0195", ["\u0199", "\u019B"], "\u019E", "\u01A1", "\u01A3", "\u01A5", "\u01A8", ["\u01AA", "\u01AB"], "\u01AD", "\u01B0", "\u01B4", "\u01B6", ["\u01B9", "\u01BA"], ["\u01BD", "\u01BF"], "\u01C6", "\u01C9", "\u01CC", "\u01CE", "\u01D0", "\u01D2", "\u01D4", "\u01D6", "\u01D8", "\u01DA", ["\u01DC", "\u01DD"], "\u01DF", "\u01E1", "\u01E3", "\u01E5", "\u01E7", "\u01E9", "\u01EB", "\u01ED", ["\u01EF", "\u01F0"], "\u01F3", "\u01F5", "\u01F9", "\u01FB", "\u01FD", "\u01FF", "\u0201", "\u0203", "\u0205", "\u0207", "\u0209", "\u020B", "\u020D", "\u020F", "\u0211", "\u0213", "\u0215", "\u0217", "\u0219", "\u021B", "\u021D", "\u021F", "\u0221", "\u0223", "\u0225", "\u0227", "\u0229", "\u022B", "\u022D", "\u022F", "\u0231", ["\u0233", "\u0239"], "\u023C", ["\u023F", "\u0240"], "\u0242", "\u0247", "\u0249", "\u024B", "\u024D", ["\u024F", "\u0293"], ["\u0295", "\u02AF"], "\u0371", "\u0373", "\u0377", ["\u037B", "\u037D"], "\u0390", ["\u03AC", "\u03CE"], ["\u03D0", "\u03D1"], ["\u03D5", "\u03D7"], "\u03D9", "\u03DB", "\u03DD", "\u03DF", "\u03E1", "\u03E3", "\u03E5", "\u03E7", "\u03E9", "\u03EB", "\u03ED", ["\u03EF", "\u03F3"], "\u03F5", "\u03F8", ["\u03FB", "\u03FC"], ["\u0430", "\u045F"], "\u0461", "\u0463", "\u0465", "\u0467", "\u0469", "\u046B", "\u046D", "\u046F", "\u0471", "\u0473", "\u0475", "\u0477", "\u0479", "\u047B", "\u047D", "\u047F", "\u0481", "\u048B", "\u048D", "\u048F", "\u0491", "\u0493", "\u0495", "\u0497", "\u0499", "\u049B", "\u049D", "\u049F", "\u04A1", "\u04A3", "\u04A5", "\u04A7", "\u04A9", "\u04AB", "\u04AD", "\u04AF", "\u04B1", "\u04B3", "\u04B5", "\u04B7", "\u04B9", "\u04BB", "\u04BD", "\u04BF", "\u04C2", "\u04C4", "\u04C6", "\u04C8", "\u04CA", "\u04CC", ["\u04CE", "\u04CF"], "\u04D1", "\u04D3", "\u04D5", "\u04D7", "\u04D9", "\u04DB", "\u04DD", "\u04DF", "\u04E1", "\u04E3", "\u04E5", "\u04E7", "\u04E9", "\u04EB", "\u04ED", "\u04EF", "\u04F1", "\u04F3", "\u04F5", "\u04F7", "\u04F9", "\u04FB", "\u04FD", "\u04FF", "\u0501", "\u0503", "\u0505", "\u0507", "\u0509", "\u050B", "\u050D", "\u050F", "\u0511", "\u0513", "\u0515", "\u0517", "\u0519", "\u051B", "\u051D", "\u051F", "\u0521", "\u0523", "\u0525", "\u0527", "\u0529", "\u052B", "\u052D", "\u052F", ["\u0560", "\u0588"], ["\u10D0", "\u10FA"], ["\u10FD", "\u10FF"], ["\u13F8", "\u13FD"], ["\u1C80", "\u1C88"], ["\u1D00", "\u1D2B"], ["\u1D6B", "\u1D77"], ["\u1D79", "\u1D9A"], "\u1E01", "\u1E03", "\u1E05", "\u1E07", "\u1E09", "\u1E0B", "\u1E0D", "\u1E0F", "\u1E11", "\u1E13", "\u1E15", "\u1E17", "\u1E19", "\u1E1B", "\u1E1D", "\u1E1F", "\u1E21", "\u1E23", "\u1E25", "\u1E27", "\u1E29", "\u1E2B", "\u1E2D", "\u1E2F", "\u1E31", "\u1E33", "\u1E35", "\u1E37", "\u1E39", "\u1E3B", "\u1E3D", "\u1E3F", "\u1E41", "\u1E43", "\u1E45", "\u1E47", "\u1E49", "\u1E4B", "\u1E4D", "\u1E4F", "\u1E51", "\u1E53", "\u1E55", "\u1E57", "\u1E59", "\u1E5B", "\u1E5D", "\u1E5F", "\u1E61", "\u1E63", "\u1E65", "\u1E67", "\u1E69", "\u1E6B", "\u1E6D", "\u1E6F", "\u1E71", "\u1E73", "\u1E75", "\u1E77", "\u1E79", "\u1E7B", "\u1E7D", "\u1E7F", "\u1E81", "\u1E83", "\u1E85", "\u1E87", "\u1E89", "\u1E8B", "\u1E8D", "\u1E8F", "\u1E91", "\u1E93", ["\u1E95", "\u1E9D"], "\u1E9F", "\u1EA1", "\u1EA3", "\u1EA5", "\u1EA7", "\u1EA9", "\u1EAB", "\u1EAD", "\u1EAF", "\u1EB1", "\u1EB3", "\u1EB5", "\u1EB7", "\u1EB9", "\u1EBB", "\u1EBD", "\u1EBF", "\u1EC1", "\u1EC3", "\u1EC5", "\u1EC7", "\u1EC9", "\u1ECB", "\u1ECD", "\u1ECF", "\u1ED1", "\u1ED3", "\u1ED5", "\u1ED7", "\u1ED9", "\u1EDB", "\u1EDD", "\u1EDF", "\u1EE1", "\u1EE3", "\u1EE5", "\u1EE7", "\u1EE9", "\u1EEB", "\u1EED", "\u1EEF", "\u1EF1", "\u1EF3", "\u1EF5", "\u1EF7", "\u1EF9", "\u1EFB", "\u1EFD", ["\u1EFF", "\u1F07"], ["\u1F10", "\u1F15"], ["\u1F20", "\u1F27"], ["\u1F30", "\u1F37"], ["\u1F40", "\u1F45"], ["\u1F50", "\u1F57"], ["\u1F60", "\u1F67"], ["\u1F70", "\u1F7D"], ["\u1F80", "\u1F87"], ["\u1F90", "\u1F97"], ["\u1FA0", "\u1FA7"], ["\u1FB0", "\u1FB4"], ["\u1FB6", "\u1FB7"], "\u1FBE", ["\u1FC2", "\u1FC4"], ["\u1FC6", "\u1FC7"], ["\u1FD0", "\u1FD3"], ["\u1FD6", "\u1FD7"], ["\u1FE0", "\u1FE7"], ["\u1FF2", "\u1FF4"], ["\u1FF6", "\u1FF7"], "\u210A", ["\u210E", "\u210F"], "\u2113", "\u212F", "\u2134", "\u2139", ["\u213C", "\u213D"], ["\u2146", "\u2149"], "\u214E", "\u2184", ["\u2C30", "\u2C5E"], "\u2C61", ["\u2C65", "\u2C66"], "\u2C68", "\u2C6A", "\u2C6C", "\u2C71", ["\u2C73", "\u2C74"], ["\u2C76", "\u2C7B"], "\u2C81", "\u2C83", "\u2C85", "\u2C87", "\u2C89", "\u2C8B", "\u2C8D", "\u2C8F", "\u2C91", "\u2C93", "\u2C95", "\u2C97", "\u2C99", "\u2C9B", "\u2C9D", "\u2C9F", "\u2CA1", "\u2CA3", "\u2CA5", "\u2CA7", "\u2CA9", "\u2CAB", "\u2CAD", "\u2CAF", "\u2CB1", "\u2CB3", "\u2CB5", "\u2CB7", "\u2CB9", "\u2CBB", "\u2CBD", "\u2CBF", "\u2CC1", "\u2CC3", "\u2CC5", "\u2CC7", "\u2CC9", "\u2CCB", "\u2CCD", "\u2CCF", "\u2CD1", "\u2CD3", "\u2CD5", "\u2CD7", "\u2CD9", "\u2CDB", "\u2CDD", "\u2CDF", "\u2CE1", ["\u2CE3", "\u2CE4"], "\u2CEC", "\u2CEE", "\u2CF3", ["\u2D00", "\u2D25"], "\u2D27", "\u2D2D", "\uA641", "\uA643", "\uA645", "\uA647", "\uA649", "\uA64B", "\uA64D", "\uA64F", "\uA651", "\uA653", "\uA655", "\uA657", "\uA659", "\uA65B", "\uA65D", "\uA65F", "\uA661", "\uA663", "\uA665", "\uA667", "\uA669", "\uA66B", "\uA66D", "\uA681", "\uA683", "\uA685", "\uA687", "\uA689", "\uA68B", "\uA68D", "\uA68F", "\uA691", "\uA693", "\uA695", "\uA697", "\uA699", "\uA69B", "\uA723", "\uA725", "\uA727", "\uA729", "\uA72B", "\uA72D", ["\uA72F", "\uA731"], "\uA733", "\uA735", "\uA737", "\uA739", "\uA73B", "\uA73D", "\uA73F", "\uA741", "\uA743", "\uA745", "\uA747", "\uA749", "\uA74B", "\uA74D", "\uA74F", "\uA751", "\uA753", "\uA755", "\uA757", "\uA759", "\uA75B", "\uA75D", "\uA75F", "\uA761", "\uA763", "\uA765", "\uA767", "\uA769", "\uA76B", "\uA76D", "\uA76F", ["\uA771", "\uA778"], "\uA77A", "\uA77C", "\uA77F", "\uA781", "\uA783", "\uA785", "\uA787", "\uA78C", "\uA78E", "\uA791", ["\uA793", "\uA795"], "\uA797", "\uA799", "\uA79B", "\uA79D", "\uA79F", "\uA7A1", "\uA7A3", "\uA7A5", "\uA7A7", "\uA7A9", "\uA7AF", "\uA7B5", "\uA7B7", "\uA7B9", "\uA7FA", ["\uAB30", "\uAB5A"], ["\uAB60", "\uAB65"], ["\uAB70", "\uABBF"], ["\uFB00", "\uFB06"], ["\uFB13", "\uFB17"], ["\uFF41", "\uFF5A"]], false, false),
        /^[\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5-\u06E6\u07F4-\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D-\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C-\uA69D\uA717-\uA71F\uA770\uA788\uA7F8-\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3-\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E-\uFF9F]/,
        peg$classExpectation([["\u02B0", "\u02C1"], ["\u02C6", "\u02D1"], ["\u02E0", "\u02E4"], "\u02EC", "\u02EE", "\u0374", "\u037A", "\u0559", "\u0640", ["\u06E5", "\u06E6"], ["\u07F4", "\u07F5"], "\u07FA", "\u081A", "\u0824", "\u0828", "\u0971", "\u0E46", "\u0EC6", "\u10FC", "\u17D7", "\u1843", "\u1AA7", ["\u1C78", "\u1C7D"], ["\u1D2C", "\u1D6A"], "\u1D78", ["\u1D9B", "\u1DBF"], "\u2071", "\u207F", ["\u2090", "\u209C"], ["\u2C7C", "\u2C7D"], "\u2D6F", "\u2E2F", "\u3005", ["\u3031", "\u3035"], "\u303B", ["\u309D", "\u309E"], ["\u30FC", "\u30FE"], "\uA015", ["\uA4F8", "\uA4FD"], "\uA60C", "\uA67F", ["\uA69C", "\uA69D"], ["\uA717", "\uA71F"], "\uA770", "\uA788", ["\uA7F8", "\uA7F9"], "\uA9CF", "\uA9E6", "\uAA70", "\uAADD", ["\uAAF3", "\uAAF4"], ["\uAB5C", "\uAB5F"], "\uFF70", ["\uFF9E", "\uFF9F"]], false, false),
        /^[\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05EF-\u05F2\u0620-\u063F\u0641-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u09FC\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60-\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E45\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u1100-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A-\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD-\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
        peg$classExpectation(["\xAA", "\xBA", "\u01BB", ["\u01C0", "\u01C3"], "\u0294", ["\u05D0", "\u05EA"], ["\u05EF", "\u05F2"], ["\u0620", "\u063F"], ["\u0641", "\u064A"], ["\u066E", "\u066F"], ["\u0671", "\u06D3"], "\u06D5", ["\u06EE", "\u06EF"], ["\u06FA", "\u06FC"], "\u06FF", "\u0710", ["\u0712", "\u072F"], ["\u074D", "\u07A5"], "\u07B1", ["\u07CA", "\u07EA"], ["\u0800", "\u0815"], ["\u0840", "\u0858"], ["\u0860", "\u086A"], ["\u08A0", "\u08B4"], ["\u08B6", "\u08BD"], ["\u0904", "\u0939"], "\u093D", "\u0950", ["\u0958", "\u0961"], ["\u0972", "\u0980"], ["\u0985", "\u098C"], ["\u098F", "\u0990"], ["\u0993", "\u09A8"], ["\u09AA", "\u09B0"], "\u09B2", ["\u09B6", "\u09B9"], "\u09BD", "\u09CE", ["\u09DC", "\u09DD"], ["\u09DF", "\u09E1"], ["\u09F0", "\u09F1"], "\u09FC", ["\u0A05", "\u0A0A"], ["\u0A0F", "\u0A10"], ["\u0A13", "\u0A28"], ["\u0A2A", "\u0A30"], ["\u0A32", "\u0A33"], ["\u0A35", "\u0A36"], ["\u0A38", "\u0A39"], ["\u0A59", "\u0A5C"], "\u0A5E", ["\u0A72", "\u0A74"], ["\u0A85", "\u0A8D"], ["\u0A8F", "\u0A91"], ["\u0A93", "\u0AA8"], ["\u0AAA", "\u0AB0"], ["\u0AB2", "\u0AB3"], ["\u0AB5", "\u0AB9"], "\u0ABD", "\u0AD0", ["\u0AE0", "\u0AE1"], "\u0AF9", ["\u0B05", "\u0B0C"], ["\u0B0F", "\u0B10"], ["\u0B13", "\u0B28"], ["\u0B2A", "\u0B30"], ["\u0B32", "\u0B33"], ["\u0B35", "\u0B39"], "\u0B3D", ["\u0B5C", "\u0B5D"], ["\u0B5F", "\u0B61"], "\u0B71", "\u0B83", ["\u0B85", "\u0B8A"], ["\u0B8E", "\u0B90"], ["\u0B92", "\u0B95"], ["\u0B99", "\u0B9A"], "\u0B9C", ["\u0B9E", "\u0B9F"], ["\u0BA3", "\u0BA4"], ["\u0BA8", "\u0BAA"], ["\u0BAE", "\u0BB9"], "\u0BD0", ["\u0C05", "\u0C0C"], ["\u0C0E", "\u0C10"], ["\u0C12", "\u0C28"], ["\u0C2A", "\u0C39"], "\u0C3D", ["\u0C58", "\u0C5A"], ["\u0C60", "\u0C61"], "\u0C80", ["\u0C85", "\u0C8C"], ["\u0C8E", "\u0C90"], ["\u0C92", "\u0CA8"], ["\u0CAA", "\u0CB3"], ["\u0CB5", "\u0CB9"], "\u0CBD", "\u0CDE", ["\u0CE0", "\u0CE1"], ["\u0CF1", "\u0CF2"], ["\u0D05", "\u0D0C"], ["\u0D0E", "\u0D10"], ["\u0D12", "\u0D3A"], "\u0D3D", "\u0D4E", ["\u0D54", "\u0D56"], ["\u0D5F", "\u0D61"], ["\u0D7A", "\u0D7F"], ["\u0D85", "\u0D96"], ["\u0D9A", "\u0DB1"], ["\u0DB3", "\u0DBB"], "\u0DBD", ["\u0DC0", "\u0DC6"], ["\u0E01", "\u0E30"], ["\u0E32", "\u0E33"], ["\u0E40", "\u0E45"], ["\u0E81", "\u0E82"], "\u0E84", ["\u0E87", "\u0E88"], "\u0E8A", "\u0E8D", ["\u0E94", "\u0E97"], ["\u0E99", "\u0E9F"], ["\u0EA1", "\u0EA3"], "\u0EA5", "\u0EA7", ["\u0EAA", "\u0EAB"], ["\u0EAD", "\u0EB0"], ["\u0EB2", "\u0EB3"], "\u0EBD", ["\u0EC0", "\u0EC4"], ["\u0EDC", "\u0EDF"], "\u0F00", ["\u0F40", "\u0F47"], ["\u0F49", "\u0F6C"], ["\u0F88", "\u0F8C"], ["\u1000", "\u102A"], "\u103F", ["\u1050", "\u1055"], ["\u105A", "\u105D"], "\u1061", ["\u1065", "\u1066"], ["\u106E", "\u1070"], ["\u1075", "\u1081"], "\u108E", ["\u1100", "\u1248"], ["\u124A", "\u124D"], ["\u1250", "\u1256"], "\u1258", ["\u125A", "\u125D"], ["\u1260", "\u1288"], ["\u128A", "\u128D"], ["\u1290", "\u12B0"], ["\u12B2", "\u12B5"], ["\u12B8", "\u12BE"], "\u12C0", ["\u12C2", "\u12C5"], ["\u12C8", "\u12D6"], ["\u12D8", "\u1310"], ["\u1312", "\u1315"], ["\u1318", "\u135A"], ["\u1380", "\u138F"], ["\u1401", "\u166C"], ["\u166F", "\u167F"], ["\u1681", "\u169A"], ["\u16A0", "\u16EA"], ["\u16F1", "\u16F8"], ["\u1700", "\u170C"], ["\u170E", "\u1711"], ["\u1720", "\u1731"], ["\u1740", "\u1751"], ["\u1760", "\u176C"], ["\u176E", "\u1770"], ["\u1780", "\u17B3"], "\u17DC", ["\u1820", "\u1842"], ["\u1844", "\u1878"], ["\u1880", "\u1884"], ["\u1887", "\u18A8"], "\u18AA", ["\u18B0", "\u18F5"], ["\u1900", "\u191E"], ["\u1950", "\u196D"], ["\u1970", "\u1974"], ["\u1980", "\u19AB"], ["\u19B0", "\u19C9"], ["\u1A00", "\u1A16"], ["\u1A20", "\u1A54"], ["\u1B05", "\u1B33"], ["\u1B45", "\u1B4B"], ["\u1B83", "\u1BA0"], ["\u1BAE", "\u1BAF"], ["\u1BBA", "\u1BE5"], ["\u1C00", "\u1C23"], ["\u1C4D", "\u1C4F"], ["\u1C5A", "\u1C77"], ["\u1CE9", "\u1CEC"], ["\u1CEE", "\u1CF1"], ["\u1CF5", "\u1CF6"], ["\u2135", "\u2138"], ["\u2D30", "\u2D67"], ["\u2D80", "\u2D96"], ["\u2DA0", "\u2DA6"], ["\u2DA8", "\u2DAE"], ["\u2DB0", "\u2DB6"], ["\u2DB8", "\u2DBE"], ["\u2DC0", "\u2DC6"], ["\u2DC8", "\u2DCE"], ["\u2DD0", "\u2DD6"], ["\u2DD8", "\u2DDE"], "\u3006", "\u303C", ["\u3041", "\u3096"], "\u309F", ["\u30A1", "\u30FA"], "\u30FF", ["\u3105", "\u312F"], ["\u3131", "\u318E"], ["\u31A0", "\u31BA"], ["\u31F0", "\u31FF"], ["\u3400", "\u4DB5"], ["\u4E00", "\u9FEF"], ["\uA000", "\uA014"], ["\uA016", "\uA48C"], ["\uA4D0", "\uA4F7"], ["\uA500", "\uA60B"], ["\uA610", "\uA61F"], ["\uA62A", "\uA62B"], "\uA66E", ["\uA6A0", "\uA6E5"], "\uA78F", "\uA7F7", ["\uA7FB", "\uA801"], ["\uA803", "\uA805"], ["\uA807", "\uA80A"], ["\uA80C", "\uA822"], ["\uA840", "\uA873"], ["\uA882", "\uA8B3"], ["\uA8F2", "\uA8F7"], "\uA8FB", ["\uA8FD", "\uA8FE"], ["\uA90A", "\uA925"], ["\uA930", "\uA946"], ["\uA960", "\uA97C"], ["\uA984", "\uA9B2"], ["\uA9E0", "\uA9E4"], ["\uA9E7", "\uA9EF"], ["\uA9FA", "\uA9FE"], ["\uAA00", "\uAA28"], ["\uAA40", "\uAA42"], ["\uAA44", "\uAA4B"], ["\uAA60", "\uAA6F"], ["\uAA71", "\uAA76"], "\uAA7A", ["\uAA7E", "\uAAAF"], "\uAAB1", ["\uAAB5", "\uAAB6"], ["\uAAB9", "\uAABD"], "\uAAC0", "\uAAC2", ["\uAADB", "\uAADC"], ["\uAAE0", "\uAAEA"], "\uAAF2", ["\uAB01", "\uAB06"], ["\uAB09", "\uAB0E"], ["\uAB11", "\uAB16"], ["\uAB20", "\uAB26"], ["\uAB28", "\uAB2E"], ["\uABC0", "\uABE2"], ["\uAC00", "\uD7A3"], ["\uD7B0", "\uD7C6"], ["\uD7CB", "\uD7FB"], ["\uF900", "\uFA6D"], ["\uFA70", "\uFAD9"], "\uFB1D", ["\uFB1F", "\uFB28"], ["\uFB2A", "\uFB36"], ["\uFB38", "\uFB3C"], "\uFB3E", ["\uFB40", "\uFB41"], ["\uFB43", "\uFB44"], ["\uFB46", "\uFBB1"], ["\uFBD3", "\uFD3D"], ["\uFD50", "\uFD8F"], ["\uFD92", "\uFDC7"], ["\uFDF0", "\uFDFB"], ["\uFE70", "\uFE74"], ["\uFE76", "\uFEFC"], ["\uFF66", "\uFF6F"], ["\uFF71", "\uFF9D"], ["\uFFA0", "\uFFBE"], ["\uFFC2", "\uFFC7"], ["\uFFCA", "\uFFCF"], ["\uFFD2", "\uFFD7"], ["\uFFDA", "\uFFDC"]], false, false),
        /^[\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC]/,
        peg$classExpectation(["\u01C5", "\u01C8", "\u01CB", "\u01F2", ["\u1F88", "\u1F8F"], ["\u1F98", "\u1F9F"], ["\u1FA8", "\u1FAF"], "\u1FBC", "\u1FCC", "\u1FFC"], false, false),
        /^[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178-\u0179\u017B\u017D\u0181-\u0182\u0184\u0186-\u0187\u0189-\u018B\u018E-\u0191\u0193-\u0194\u0196-\u0198\u019C-\u019D\u019F-\u01A0\u01A2\u01A4\u01A6-\u01A7\u01A9\u01AC\u01AE-\u01AF\u01B1-\u01B3\u01B5\u01B7-\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A-\u023B\u023D-\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E-\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9-\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0-\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E-\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D-\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uFF21-\uFF3A]/,
        peg$classExpectation([["A", "Z"], ["\xC0", "\xD6"], ["\xD8", "\xDE"], "\u0100", "\u0102", "\u0104", "\u0106", "\u0108", "\u010A", "\u010C", "\u010E", "\u0110", "\u0112", "\u0114", "\u0116", "\u0118", "\u011A", "\u011C", "\u011E", "\u0120", "\u0122", "\u0124", "\u0126", "\u0128", "\u012A", "\u012C", "\u012E", "\u0130", "\u0132", "\u0134", "\u0136", "\u0139", "\u013B", "\u013D", "\u013F", "\u0141", "\u0143", "\u0145", "\u0147", "\u014A", "\u014C", "\u014E", "\u0150", "\u0152", "\u0154", "\u0156", "\u0158", "\u015A", "\u015C", "\u015E", "\u0160", "\u0162", "\u0164", "\u0166", "\u0168", "\u016A", "\u016C", "\u016E", "\u0170", "\u0172", "\u0174", "\u0176", ["\u0178", "\u0179"], "\u017B", "\u017D", ["\u0181", "\u0182"], "\u0184", ["\u0186", "\u0187"], ["\u0189", "\u018B"], ["\u018E", "\u0191"], ["\u0193", "\u0194"], ["\u0196", "\u0198"], ["\u019C", "\u019D"], ["\u019F", "\u01A0"], "\u01A2", "\u01A4", ["\u01A6", "\u01A7"], "\u01A9", "\u01AC", ["\u01AE", "\u01AF"], ["\u01B1", "\u01B3"], "\u01B5", ["\u01B7", "\u01B8"], "\u01BC", "\u01C4", "\u01C7", "\u01CA", "\u01CD", "\u01CF", "\u01D1", "\u01D3", "\u01D5", "\u01D7", "\u01D9", "\u01DB", "\u01DE", "\u01E0", "\u01E2", "\u01E4", "\u01E6", "\u01E8", "\u01EA", "\u01EC", "\u01EE", "\u01F1", "\u01F4", ["\u01F6", "\u01F8"], "\u01FA", "\u01FC", "\u01FE", "\u0200", "\u0202", "\u0204", "\u0206", "\u0208", "\u020A", "\u020C", "\u020E", "\u0210", "\u0212", "\u0214", "\u0216", "\u0218", "\u021A", "\u021C", "\u021E", "\u0220", "\u0222", "\u0224", "\u0226", "\u0228", "\u022A", "\u022C", "\u022E", "\u0230", "\u0232", ["\u023A", "\u023B"], ["\u023D", "\u023E"], "\u0241", ["\u0243", "\u0246"], "\u0248", "\u024A", "\u024C", "\u024E", "\u0370", "\u0372", "\u0376", "\u037F", "\u0386", ["\u0388", "\u038A"], "\u038C", ["\u038E", "\u038F"], ["\u0391", "\u03A1"], ["\u03A3", "\u03AB"], "\u03CF", ["\u03D2", "\u03D4"], "\u03D8", "\u03DA", "\u03DC", "\u03DE", "\u03E0", "\u03E2", "\u03E4", "\u03E6", "\u03E8", "\u03EA", "\u03EC", "\u03EE", "\u03F4", "\u03F7", ["\u03F9", "\u03FA"], ["\u03FD", "\u042F"], "\u0460", "\u0462", "\u0464", "\u0466", "\u0468", "\u046A", "\u046C", "\u046E", "\u0470", "\u0472", "\u0474", "\u0476", "\u0478", "\u047A", "\u047C", "\u047E", "\u0480", "\u048A", "\u048C", "\u048E", "\u0490", "\u0492", "\u0494", "\u0496", "\u0498", "\u049A", "\u049C", "\u049E", "\u04A0", "\u04A2", "\u04A4", "\u04A6", "\u04A8", "\u04AA", "\u04AC", "\u04AE", "\u04B0", "\u04B2", "\u04B4", "\u04B6", "\u04B8", "\u04BA", "\u04BC", "\u04BE", ["\u04C0", "\u04C1"], "\u04C3", "\u04C5", "\u04C7", "\u04C9", "\u04CB", "\u04CD", "\u04D0", "\u04D2", "\u04D4", "\u04D6", "\u04D8", "\u04DA", "\u04DC", "\u04DE", "\u04E0", "\u04E2", "\u04E4", "\u04E6", "\u04E8", "\u04EA", "\u04EC", "\u04EE", "\u04F0", "\u04F2", "\u04F4", "\u04F6", "\u04F8", "\u04FA", "\u04FC", "\u04FE", "\u0500", "\u0502", "\u0504", "\u0506", "\u0508", "\u050A", "\u050C", "\u050E", "\u0510", "\u0512", "\u0514", "\u0516", "\u0518", "\u051A", "\u051C", "\u051E", "\u0520", "\u0522", "\u0524", "\u0526", "\u0528", "\u052A", "\u052C", "\u052E", ["\u0531", "\u0556"], ["\u10A0", "\u10C5"], "\u10C7", "\u10CD", ["\u13A0", "\u13F5"], ["\u1C90", "\u1CBA"], ["\u1CBD", "\u1CBF"], "\u1E00", "\u1E02", "\u1E04", "\u1E06", "\u1E08", "\u1E0A", "\u1E0C", "\u1E0E", "\u1E10", "\u1E12", "\u1E14", "\u1E16", "\u1E18", "\u1E1A", "\u1E1C", "\u1E1E", "\u1E20", "\u1E22", "\u1E24", "\u1E26", "\u1E28", "\u1E2A", "\u1E2C", "\u1E2E", "\u1E30", "\u1E32", "\u1E34", "\u1E36", "\u1E38", "\u1E3A", "\u1E3C", "\u1E3E", "\u1E40", "\u1E42", "\u1E44", "\u1E46", "\u1E48", "\u1E4A", "\u1E4C", "\u1E4E", "\u1E50", "\u1E52", "\u1E54", "\u1E56", "\u1E58", "\u1E5A", "\u1E5C", "\u1E5E", "\u1E60", "\u1E62", "\u1E64", "\u1E66", "\u1E68", "\u1E6A", "\u1E6C", "\u1E6E", "\u1E70", "\u1E72", "\u1E74", "\u1E76", "\u1E78", "\u1E7A", "\u1E7C", "\u1E7E", "\u1E80", "\u1E82", "\u1E84", "\u1E86", "\u1E88", "\u1E8A", "\u1E8C", "\u1E8E", "\u1E90", "\u1E92", "\u1E94", "\u1E9E", "\u1EA0", "\u1EA2", "\u1EA4", "\u1EA6", "\u1EA8", "\u1EAA", "\u1EAC", "\u1EAE", "\u1EB0", "\u1EB2", "\u1EB4", "\u1EB6", "\u1EB8", "\u1EBA", "\u1EBC", "\u1EBE", "\u1EC0", "\u1EC2", "\u1EC4", "\u1EC6", "\u1EC8", "\u1ECA", "\u1ECC", "\u1ECE", "\u1ED0", "\u1ED2", "\u1ED4", "\u1ED6", "\u1ED8", "\u1EDA", "\u1EDC", "\u1EDE", "\u1EE0", "\u1EE2", "\u1EE4", "\u1EE6", "\u1EE8", "\u1EEA", "\u1EEC", "\u1EEE", "\u1EF0", "\u1EF2", "\u1EF4", "\u1EF6", "\u1EF8", "\u1EFA", "\u1EFC", "\u1EFE", ["\u1F08", "\u1F0F"], ["\u1F18", "\u1F1D"], ["\u1F28", "\u1F2F"], ["\u1F38", "\u1F3F"], ["\u1F48", "\u1F4D"], "\u1F59", "\u1F5B", "\u1F5D", "\u1F5F", ["\u1F68", "\u1F6F"], ["\u1FB8", "\u1FBB"], ["\u1FC8", "\u1FCB"], ["\u1FD8", "\u1FDB"], ["\u1FE8", "\u1FEC"], ["\u1FF8", "\u1FFB"], "\u2102", "\u2107", ["\u210B", "\u210D"], ["\u2110", "\u2112"], "\u2115", ["\u2119", "\u211D"], "\u2124", "\u2126", "\u2128", ["\u212A", "\u212D"], ["\u2130", "\u2133"], ["\u213E", "\u213F"], "\u2145", "\u2183", ["\u2C00", "\u2C2E"], "\u2C60", ["\u2C62", "\u2C64"], "\u2C67", "\u2C69", "\u2C6B", ["\u2C6D", "\u2C70"], "\u2C72", "\u2C75", ["\u2C7E", "\u2C80"], "\u2C82", "\u2C84", "\u2C86", "\u2C88", "\u2C8A", "\u2C8C", "\u2C8E", "\u2C90", "\u2C92", "\u2C94", "\u2C96", "\u2C98", "\u2C9A", "\u2C9C", "\u2C9E", "\u2CA0", "\u2CA2", "\u2CA4", "\u2CA6", "\u2CA8", "\u2CAA", "\u2CAC", "\u2CAE", "\u2CB0", "\u2CB2", "\u2CB4", "\u2CB6", "\u2CB8", "\u2CBA", "\u2CBC", "\u2CBE", "\u2CC0", "\u2CC2", "\u2CC4", "\u2CC6", "\u2CC8", "\u2CCA", "\u2CCC", "\u2CCE", "\u2CD0", "\u2CD2", "\u2CD4", "\u2CD6", "\u2CD8", "\u2CDA", "\u2CDC", "\u2CDE", "\u2CE0", "\u2CE2", "\u2CEB", "\u2CED", "\u2CF2", "\uA640", "\uA642", "\uA644", "\uA646", "\uA648", "\uA64A", "\uA64C", "\uA64E", "\uA650", "\uA652", "\uA654", "\uA656", "\uA658", "\uA65A", "\uA65C", "\uA65E", "\uA660", "\uA662", "\uA664", "\uA666", "\uA668", "\uA66A", "\uA66C", "\uA680", "\uA682", "\uA684", "\uA686", "\uA688", "\uA68A", "\uA68C", "\uA68E", "\uA690", "\uA692", "\uA694", "\uA696", "\uA698", "\uA69A", "\uA722", "\uA724", "\uA726", "\uA728", "\uA72A", "\uA72C", "\uA72E", "\uA732", "\uA734", "\uA736", "\uA738", "\uA73A", "\uA73C", "\uA73E", "\uA740", "\uA742", "\uA744", "\uA746", "\uA748", "\uA74A", "\uA74C", "\uA74E", "\uA750", "\uA752", "\uA754", "\uA756", "\uA758", "\uA75A", "\uA75C", "\uA75E", "\uA760", "\uA762", "\uA764", "\uA766", "\uA768", "\uA76A", "\uA76C", "\uA76E", "\uA779", "\uA77B", ["\uA77D", "\uA77E"], "\uA780", "\uA782", "\uA784", "\uA786", "\uA78B", "\uA78D", "\uA790", "\uA792", "\uA796", "\uA798", "\uA79A", "\uA79C", "\uA79E", "\uA7A0", "\uA7A2", "\uA7A4", "\uA7A6", "\uA7A8", ["\uA7AA", "\uA7AE"], ["\uA7B0", "\uA7B4"], "\uA7B6", "\uA7B8", ["\uFF21", "\uFF3A"]], false, false),
        /^[\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E-\u094F\u0982-\u0983\u09BE-\u09C0\u09C7-\u09C8\u09CB-\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB-\u0ACC\u0B02-\u0B03\u0B3E\u0B40\u0B47-\u0B48\u0B4B-\u0B4C\u0B57\u0BBE-\u0BBF\u0BC1-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82-\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7-\u0CC8\u0CCA-\u0CCB\u0CD5-\u0CD6\u0D02-\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82-\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2-\u0DF3\u0F3E-\u0F3F\u0F7F\u102B-\u102C\u1031\u1038\u103B-\u103C\u1056-\u1057\u1062-\u1064\u1067-\u106D\u1083-\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7-\u17C8\u1923-\u1926\u1929-\u192B\u1930-\u1931\u1933-\u1938\u1A19-\u1A1A\u1A55\u1A57\u1A61\u1A63-\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B44\u1B82\u1BA1\u1BA6-\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2-\u1BF3\u1C24-\u1C2B\u1C34-\u1C35\u1CE1\u1CF2-\u1CF3\u1CF7\u302E-\u302F\uA823-\uA824\uA827\uA880-\uA881\uA8B4-\uA8C3\uA952-\uA953\uA983\uA9B4-\uA9B5\uA9BA-\uA9BB\uA9BD-\uA9C0\uAA2F-\uAA30\uAA33-\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE-\uAAEF\uAAF5\uABE3-\uABE4\uABE6-\uABE7\uABE9-\uABEA\uABEC]/,
        peg$classExpectation(["\u0903", "\u093B", ["\u093E", "\u0940"], ["\u0949", "\u094C"], ["\u094E", "\u094F"], ["\u0982", "\u0983"], ["\u09BE", "\u09C0"], ["\u09C7", "\u09C8"], ["\u09CB", "\u09CC"], "\u09D7", "\u0A03", ["\u0A3E", "\u0A40"], "\u0A83", ["\u0ABE", "\u0AC0"], "\u0AC9", ["\u0ACB", "\u0ACC"], ["\u0B02", "\u0B03"], "\u0B3E", "\u0B40", ["\u0B47", "\u0B48"], ["\u0B4B", "\u0B4C"], "\u0B57", ["\u0BBE", "\u0BBF"], ["\u0BC1", "\u0BC2"], ["\u0BC6", "\u0BC8"], ["\u0BCA", "\u0BCC"], "\u0BD7", ["\u0C01", "\u0C03"], ["\u0C41", "\u0C44"], ["\u0C82", "\u0C83"], "\u0CBE", ["\u0CC0", "\u0CC4"], ["\u0CC7", "\u0CC8"], ["\u0CCA", "\u0CCB"], ["\u0CD5", "\u0CD6"], ["\u0D02", "\u0D03"], ["\u0D3E", "\u0D40"], ["\u0D46", "\u0D48"], ["\u0D4A", "\u0D4C"], "\u0D57", ["\u0D82", "\u0D83"], ["\u0DCF", "\u0DD1"], ["\u0DD8", "\u0DDF"], ["\u0DF2", "\u0DF3"], ["\u0F3E", "\u0F3F"], "\u0F7F", ["\u102B", "\u102C"], "\u1031", "\u1038", ["\u103B", "\u103C"], ["\u1056", "\u1057"], ["\u1062", "\u1064"], ["\u1067", "\u106D"], ["\u1083", "\u1084"], ["\u1087", "\u108C"], "\u108F", ["\u109A", "\u109C"], "\u17B6", ["\u17BE", "\u17C5"], ["\u17C7", "\u17C8"], ["\u1923", "\u1926"], ["\u1929", "\u192B"], ["\u1930", "\u1931"], ["\u1933", "\u1938"], ["\u1A19", "\u1A1A"], "\u1A55", "\u1A57", "\u1A61", ["\u1A63", "\u1A64"], ["\u1A6D", "\u1A72"], "\u1B04", "\u1B35", "\u1B3B", ["\u1B3D", "\u1B41"], ["\u1B43", "\u1B44"], "\u1B82", "\u1BA1", ["\u1BA6", "\u1BA7"], "\u1BAA", "\u1BE7", ["\u1BEA", "\u1BEC"], "\u1BEE", ["\u1BF2", "\u1BF3"], ["\u1C24", "\u1C2B"], ["\u1C34", "\u1C35"], "\u1CE1", ["\u1CF2", "\u1CF3"], "\u1CF7", ["\u302E", "\u302F"], ["\uA823", "\uA824"], "\uA827", ["\uA880", "\uA881"], ["\uA8B4", "\uA8C3"], ["\uA952", "\uA953"], "\uA983", ["\uA9B4", "\uA9B5"], ["\uA9BA", "\uA9BB"], ["\uA9BD", "\uA9C0"], ["\uAA2F", "\uAA30"], ["\uAA33", "\uAA34"], "\uAA4D", "\uAA7B", "\uAA7D", "\uAAEB", ["\uAAEE", "\uAAEF"], "\uAAF5", ["\uABE3", "\uABE4"], ["\uABE6", "\uABE7"], ["\uABE9", "\uABEA"], "\uABEC"], false, false),
        /^[\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1-\u05C2\u05C4-\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7-\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962-\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2-\u09E3\u09FE\u0A01-\u0A02\u0A3C\u0A41-\u0A42\u0A47-\u0A48\u0A4B-\u0A4D\u0A51\u0A70-\u0A71\u0A75\u0A81-\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7-\u0AC8\u0ACD\u0AE2-\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62-\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55-\u0C56\u0C62-\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC-\u0CCD\u0CE2-\u0CE3\u0D00-\u0D01\u0D3B-\u0D3C\u0D41-\u0D44\u0D4D\u0D62-\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB-\u0EBC\u0EC8-\u0ECD\u0F18-\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86-\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039-\u103A\u103D-\u103E\u1058-\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085-\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752-\u1753\u1772-\u1773\u17B4-\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885-\u1886\u18A9\u1920-\u1922\u1927-\u1928\u1932\u1939-\u193B\u1A17-\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80-\u1B81\u1BA2-\u1BA5\u1BA8-\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8-\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099-\u309A\uA66F\uA674-\uA67D\uA69E-\uA69F\uA6F0-\uA6F1\uA802\uA806\uA80B\uA825-\uA826\uA8C4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9E5\uAA29-\uAA2E\uAA31-\uAA32\uAA35-\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7-\uAAB8\uAABE-\uAABF\uAAC1\uAAEC-\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F]/,
        peg$classExpectation([["\u0300", "\u036F"], ["\u0483", "\u0487"], ["\u0591", "\u05BD"], "\u05BF", ["\u05C1", "\u05C2"], ["\u05C4", "\u05C5"], "\u05C7", ["\u0610", "\u061A"], ["\u064B", "\u065F"], "\u0670", ["\u06D6", "\u06DC"], ["\u06DF", "\u06E4"], ["\u06E7", "\u06E8"], ["\u06EA", "\u06ED"], "\u0711", ["\u0730", "\u074A"], ["\u07A6", "\u07B0"], ["\u07EB", "\u07F3"], "\u07FD", ["\u0816", "\u0819"], ["\u081B", "\u0823"], ["\u0825", "\u0827"], ["\u0829", "\u082D"], ["\u0859", "\u085B"], ["\u08D3", "\u08E1"], ["\u08E3", "\u0902"], "\u093A", "\u093C", ["\u0941", "\u0948"], "\u094D", ["\u0951", "\u0957"], ["\u0962", "\u0963"], "\u0981", "\u09BC", ["\u09C1", "\u09C4"], "\u09CD", ["\u09E2", "\u09E3"], "\u09FE", ["\u0A01", "\u0A02"], "\u0A3C", ["\u0A41", "\u0A42"], ["\u0A47", "\u0A48"], ["\u0A4B", "\u0A4D"], "\u0A51", ["\u0A70", "\u0A71"], "\u0A75", ["\u0A81", "\u0A82"], "\u0ABC", ["\u0AC1", "\u0AC5"], ["\u0AC7", "\u0AC8"], "\u0ACD", ["\u0AE2", "\u0AE3"], ["\u0AFA", "\u0AFF"], "\u0B01", "\u0B3C", "\u0B3F", ["\u0B41", "\u0B44"], "\u0B4D", "\u0B56", ["\u0B62", "\u0B63"], "\u0B82", "\u0BC0", "\u0BCD", "\u0C00", "\u0C04", ["\u0C3E", "\u0C40"], ["\u0C46", "\u0C48"], ["\u0C4A", "\u0C4D"], ["\u0C55", "\u0C56"], ["\u0C62", "\u0C63"], "\u0C81", "\u0CBC", "\u0CBF", "\u0CC6", ["\u0CCC", "\u0CCD"], ["\u0CE2", "\u0CE3"], ["\u0D00", "\u0D01"], ["\u0D3B", "\u0D3C"], ["\u0D41", "\u0D44"], "\u0D4D", ["\u0D62", "\u0D63"], "\u0DCA", ["\u0DD2", "\u0DD4"], "\u0DD6", "\u0E31", ["\u0E34", "\u0E3A"], ["\u0E47", "\u0E4E"], "\u0EB1", ["\u0EB4", "\u0EB9"], ["\u0EBB", "\u0EBC"], ["\u0EC8", "\u0ECD"], ["\u0F18", "\u0F19"], "\u0F35", "\u0F37", "\u0F39", ["\u0F71", "\u0F7E"], ["\u0F80", "\u0F84"], ["\u0F86", "\u0F87"], ["\u0F8D", "\u0F97"], ["\u0F99", "\u0FBC"], "\u0FC6", ["\u102D", "\u1030"], ["\u1032", "\u1037"], ["\u1039", "\u103A"], ["\u103D", "\u103E"], ["\u1058", "\u1059"], ["\u105E", "\u1060"], ["\u1071", "\u1074"], "\u1082", ["\u1085", "\u1086"], "\u108D", "\u109D", ["\u135D", "\u135F"], ["\u1712", "\u1714"], ["\u1732", "\u1734"], ["\u1752", "\u1753"], ["\u1772", "\u1773"], ["\u17B4", "\u17B5"], ["\u17B7", "\u17BD"], "\u17C6", ["\u17C9", "\u17D3"], "\u17DD", ["\u180B", "\u180D"], ["\u1885", "\u1886"], "\u18A9", ["\u1920", "\u1922"], ["\u1927", "\u1928"], "\u1932", ["\u1939", "\u193B"], ["\u1A17", "\u1A18"], "\u1A1B", "\u1A56", ["\u1A58", "\u1A5E"], "\u1A60", "\u1A62", ["\u1A65", "\u1A6C"], ["\u1A73", "\u1A7C"], "\u1A7F", ["\u1AB0", "\u1ABD"], ["\u1B00", "\u1B03"], "\u1B34", ["\u1B36", "\u1B3A"], "\u1B3C", "\u1B42", ["\u1B6B", "\u1B73"], ["\u1B80", "\u1B81"], ["\u1BA2", "\u1BA5"], ["\u1BA8", "\u1BA9"], ["\u1BAB", "\u1BAD"], "\u1BE6", ["\u1BE8", "\u1BE9"], "\u1BED", ["\u1BEF", "\u1BF1"], ["\u1C2C", "\u1C33"], ["\u1C36", "\u1C37"], ["\u1CD0", "\u1CD2"], ["\u1CD4", "\u1CE0"], ["\u1CE2", "\u1CE8"], "\u1CED", "\u1CF4", ["\u1CF8", "\u1CF9"], ["\u1DC0", "\u1DF9"], ["\u1DFB", "\u1DFF"], ["\u20D0", "\u20DC"], "\u20E1", ["\u20E5", "\u20F0"], ["\u2CEF", "\u2CF1"], "\u2D7F", ["\u2DE0", "\u2DFF"], ["\u302A", "\u302D"], ["\u3099", "\u309A"], "\uA66F", ["\uA674", "\uA67D"], ["\uA69E", "\uA69F"], ["\uA6F0", "\uA6F1"], "\uA802", "\uA806", "\uA80B", ["\uA825", "\uA826"], ["\uA8C4", "\uA8C5"], ["\uA8E0", "\uA8F1"], "\uA8FF", ["\uA926", "\uA92D"], ["\uA947", "\uA951"], ["\uA980", "\uA982"], "\uA9B3", ["\uA9B6", "\uA9B9"], "\uA9BC", "\uA9E5", ["\uAA29", "\uAA2E"], ["\uAA31", "\uAA32"], ["\uAA35", "\uAA36"], "\uAA43", "\uAA4C", "\uAA7C", "\uAAB0", ["\uAAB2", "\uAAB4"], ["\uAAB7", "\uAAB8"], ["\uAABE", "\uAABF"], "\uAAC1", ["\uAAEC", "\uAAED"], "\uAAF6", "\uABE5", "\uABE8", "\uABED", "\uFB1E", ["\uFE00", "\uFE0F"], ["\uFE20", "\uFE2F"]], false, false),
        /^[0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]/,
        peg$classExpectation([["0", "9"], ["\u0660", "\u0669"], ["\u06F0", "\u06F9"], ["\u07C0", "\u07C9"], ["\u0966", "\u096F"], ["\u09E6", "\u09EF"], ["\u0A66", "\u0A6F"], ["\u0AE6", "\u0AEF"], ["\u0B66", "\u0B6F"], ["\u0BE6", "\u0BEF"], ["\u0C66", "\u0C6F"], ["\u0CE6", "\u0CEF"], ["\u0D66", "\u0D6F"], ["\u0DE6", "\u0DEF"], ["\u0E50", "\u0E59"], ["\u0ED0", "\u0ED9"], ["\u0F20", "\u0F29"], ["\u1040", "\u1049"], ["\u1090", "\u1099"], ["\u17E0", "\u17E9"], ["\u1810", "\u1819"], ["\u1946", "\u194F"], ["\u19D0", "\u19D9"], ["\u1A80", "\u1A89"], ["\u1A90", "\u1A99"], ["\u1B50", "\u1B59"], ["\u1BB0", "\u1BB9"], ["\u1C40", "\u1C49"], ["\u1C50", "\u1C59"], ["\uA620", "\uA629"], ["\uA8D0", "\uA8D9"], ["\uA900", "\uA909"], ["\uA9D0", "\uA9D9"], ["\uA9F0", "\uA9F9"], ["\uAA50", "\uAA59"], ["\uABF0", "\uABF9"], ["\uFF10", "\uFF19"]], false, false),
        /^[\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF]/,
        peg$classExpectation([["\u16EE", "\u16F0"], ["\u2160", "\u2182"], ["\u2185", "\u2188"], "\u3007", ["\u3021", "\u3029"], ["\u3038", "\u303A"], ["\uA6E6", "\uA6EF"]], false, false),
        /^[_\u203F-\u2040\u2054\uFE33-\uFE34\uFE4D-\uFE4F\uFF3F]/,
        peg$classExpectation(["_", ["\u203F", "\u2040"], "\u2054", ["\uFE33", "\uFE34"], ["\uFE4D", "\uFE4F"], "\uFF3F"], false, false),
        /^[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/,
        peg$classExpectation([" ", "\xA0", "\u1680", ["\u2000", "\u200A"], "\u202F", "\u205F", "\u3000"], false, false),
        "bool",
        peg$literalExpectation("bool", false),
        "break",
        peg$literalExpectation("break", false),
        "case",
        peg$literalExpectation("case", false),
        "catch",
        peg$literalExpectation("catch", false),
        "class",
        peg$literalExpectation("class", false),
        "const",
        peg$literalExpectation("const", false),
        "continue",
        peg$literalExpectation("continue", false),
        "coroutine",
        peg$literalExpectation("coroutine", false),
        "debugger",
        peg$literalExpectation("debugger", false),
        "default",
        peg$literalExpectation("default", false),
        "delete",
        peg$literalExpectation("delete", false),
        "do",
        peg$literalExpectation("do", false),
        "else",
        peg$literalExpectation("else", false),
        "enum",
        peg$literalExpectation("enum", false),
        "export",
        peg$literalExpectation("export", false),
        "extends",
        peg$literalExpectation("extends", false),
        "false",
        peg$literalExpectation("false", false),
        "f32",
        peg$literalExpectation("f32", false),
        "f64",
        peg$literalExpectation("f64", false),
        "finally",
        peg$literalExpectation("finally", false),
        "for",
        peg$literalExpectation("for", false),
        "get",
        peg$literalExpectation("get", false),
        "i8",
        peg$literalExpectation("i8", false),
        "i16",
        peg$literalExpectation("i16", false),
        "i32",
        peg$literalExpectation("i32", false),
        "i64",
        peg$literalExpectation("i64", false),
        "if",
        peg$literalExpectation("if", false),
        "import",
        peg$literalExpectation("import", false),
        "instanceof",
        peg$literalExpectation("instanceof", false),
        "in",
        peg$literalExpectation("in", false),
        "new",
        peg$literalExpectation("new", false),
        "null",
        peg$literalExpectation("null", false),
        "return",
        peg$literalExpectation("return", false),
        "set",
        peg$literalExpectation("set", false),
        "string",
        peg$literalExpectation("string", false),
        "super",
        peg$literalExpectation("super", false),
        "switch",
        peg$literalExpectation("switch", false),
        "u8",
        peg$literalExpectation("u8", false),
        "u16",
        peg$literalExpectation("u16", false),
        "u32",
        peg$literalExpectation("u32", false),
        "u64",
        peg$literalExpectation("u64", false),
        "this",
        peg$literalExpectation("this", false),
        "throw",
        peg$literalExpectation("throw", false),
        "true",
        peg$literalExpectation("true", false),
        "try",
        peg$literalExpectation("try", false),
        "type",
        peg$literalExpectation("type", false),
        "typeof",
        peg$literalExpectation("typeof", false),
        "var",
        peg$literalExpectation("var", false),
        "void",
        peg$literalExpectation("void", false),
        "while",
        peg$literalExpectation("while", false),
        "with",
        peg$literalExpectation("with", false),
        ";",
        peg$literalExpectation(";", false),
        function() { return { nodeType: "ThisExpression" }; },
        "(",
        peg$literalExpectation("(", false),
        ")",
        peg$literalExpectation(")", false),
        function(expression) { return expression; },
        function(elision) {
              return {
                nodeType: "ArrayExpression",
                elements: optionalList(extractOptional(elision, 0))
              };
            },
        function(elements) {
              return {
                nodeType: "ArrayExpression",
                elements: elements
              };
            },
        ",",
        peg$literalExpectation(",", false),
        function(elements, elision) {
              return {
                nodeType: "ArrayExpression",
                elements: elements.concat(optionalList(extractOptional(elision, 0)))
              };
            },
        function(elision, element) {
                return optionalList(extractOptional(elision, 0)).concat(element);
              },
        function(head, elision, element) {
                return optionalList(extractOptional(elision, 0)).concat(element);
              },
        function(head, tail) { return Array.prototype.concat.apply(head, tail); },
        function(commas) { return filledArray(commas.length + 1, null); },
        "{",
        peg$literalExpectation("{", false),
        "}",
        peg$literalExpectation("}", false),
        function() { return { nodeType: "ObjectExpression", properties: [] }; },
        function(properties) {
               return { nodeType: "ObjectExpression", properties: properties };
             },
        function(head, tail) {
              return buildList(head, tail, 3);
            },
        ":",
        peg$literalExpectation(":", false),
        function(key, value) {
              return { nodeType: "Property", key: key, value: value, kind: "init" };
            },
        function(key, body) {
              return {
                nodeType: "Property",
                key: key,
                value: {
                  nodeType: "FunctionExpression",
                  id: null,
                  params: [],
                  body: body
                },
                kind: "get"
              };
            },
        function(key, params, body) {
              return {
                nodeType: "Property",
                key: key,
                value: {
                  nodeType: "FunctionExpression",
                  id: null,
                  params: params,
                  body: body
                },
                kind: "set"
              };
            },
        function(id) { return [id]; },
        function(callee, args) {
                  return { nodeType: "NewExpression", callee: callee, arguments: args };
                },
        function(head, property) {
                  return { property: property, computed: true };
                },
        function(head, property) {
                  return { property: property, computed: false };
                },
        function(head, tail) {
              return tail.reduce(function(result, element) {
                return {
                  nodeType: "MemberExpression",
                  object: result,
                  property: element.property,
                  computed: element.computed
                };
              }, head);
            },
        function(callee) {
              return { nodeType: "NewExpression", callee: callee, arguments: [] };
            },
        function(callee, args) {
                return { nodeType: "CallExpression", callee: callee, arguments: args };
              },
        function(head, args) {
                  return { nodeType: "CallExpression", arguments: args };
                },
        function(head, property) {
                  return {
                    nodeType: "MemberExpression",
                    property: property,
                    computed: true
                  };
                },
        function(head, property) {
                  return {
                    nodeType: "MemberExpression",
                    property: property,
                    computed: false
                  };
                },
        function(head, tail) {
              return tail.reduce(function(result, element) {
                element[TYPES_TO_PROPERTY_NAMES[element.nodeType]] = result;

                return element;
              }, head);
            },
        function(args) {
              return optionalList(extractOptional(args, 0));
            },
        function(op) {
        //		op.left = true;
        		return op;
        	},
        function(argument, operator) {
              return {
                nodeType: "UpdateExpression",
                operator: operator,
                argument: argument,
                prefix: false
              };
            },
        "++",
        peg$literalExpectation("++", false),
        "--",
        peg$literalExpectation("--", false),
        function(operator, argument) {
              var nodeType = (operator === "++" || operator === "--")
                ? "UpdateExpression"
                : "UnaryExpression";

              return {
                nodeType: nodeType,
                operator: operator,
                argument: argument,
                prefix: true
              };
            },
        "+",
        peg$literalExpectation("+", false),
        "=",
        peg$literalExpectation("=", false),
        "-",
        peg$literalExpectation("-", false),
        "~",
        peg$literalExpectation("~", false),
        "!",
        peg$literalExpectation("!", false),
        function(head, tail) { return buildBinaryExpression(head, tail); },
        "*",
        peg$literalExpectation("*", false),
        "%",
        peg$literalExpectation("%", false),
        /^[+=]/,
        peg$classExpectation(["+", "="], false, false),
        /^[\-=]/,
        peg$classExpectation(["-", "="], false, false),
        "<<",
        peg$literalExpectation("<<", false),
        ">>>",
        peg$literalExpectation(">>>", false),
        ">>",
        peg$literalExpectation(">>", false),
        "<=",
        peg$literalExpectation("<=", false),
        ">=",
        peg$literalExpectation(">=", false),
        "<",
        peg$literalExpectation("<", false),
        ">",
        peg$literalExpectation(">", false),
        "===",
        peg$literalExpectation("===", false),
        "!==",
        peg$literalExpectation("!==", false),
        "==",
        peg$literalExpectation("==", false),
        "!=",
        peg$literalExpectation("!=", false),
        "&",
        peg$literalExpectation("&", false),
        /^[&=]/,
        peg$classExpectation(["&", "="], false, false),
        "^",
        peg$literalExpectation("^", false),
        "|",
        peg$literalExpectation("|", false),
        /^[|=]/,
        peg$classExpectation(["|", "="], false, false),
        function(head, tail) { return buildLogicalExpression(head, tail); },
        "&&",
        peg$literalExpectation("&&", false),
        "||",
        peg$literalExpectation("||", false),
        "?",
        peg$literalExpectation("?", false),
        function(test, consequent, alternate) {
              return {
                nodeType: "ConditionalExpression",
                test: test,
                consequent: consequent,
                alternate: alternate
              };
            },
        function(left) {left.lhs = true; return true;},
        function(left, right) {

              return {
                nodeType: "AssignmentExpression",
                operator: "=",
                left: left,
                right: right,
                //wasmCode:getStoreOp(left)(right.wasmCode)
              };
            },
        function(left, operator, right) {
              return {
                nodeType: "AssignmentExpression",
                operator: operator,
                left: left,
                right: right,
                //wasmCode:buildAssignmentOp(left,op,right)
              };
            },
        function(left, right) {
              return {
                nodeType: "AssignmentExpression",
                operator: "=",
                left: left,
                right: right,
                //wasmCode:getStoreOp(left)(right.wasmCode)
              };
            },
        function(left, operator, right) {
              return {
                nodeType: "AssignmentExpression",
                operator: operator,
                left: left,
                right: right,
                //wasmCode: buildAssignmentOp(left,op,right)
              };
            },
        "*=",
        peg$literalExpectation("*=", false),
        "/=",
        peg$literalExpectation("/=", false),
        "%=",
        peg$literalExpectation("%=", false),
        "+=",
        peg$literalExpectation("+=", false),
        "-=",
        peg$literalExpectation("-=", false),
        "<<=",
        peg$literalExpectation("<<=", false),
        "<<&=",
        peg$literalExpectation("<<&=", false),
        ">>=",
        peg$literalExpectation(">>=", false),
        ">>&=",
        peg$literalExpectation(">>&=", false),
        ">>>=",
        peg$literalExpectation(">>>=", false),
        "&=",
        peg$literalExpectation("&=", false),
        "^=",
        peg$literalExpectation("^=", false),
        "|=",
        peg$literalExpectation("|=", false),
        function(head, tail) {
              return tail.length > 0
                ? { nodeType: "SequenceExpression", expressions: buildList(head, tail, 3) }
                : head;
            },
        function(body) {
              return {
                nodeType: "BlockStatement",
                body: optionalList(extractOptional(body, 0))
              };
            },
        function() {createScope(); return text();},
        function() {scope.pop();return text();},
        function(head, tail) { return buildList(head, tail, 1); },
        function(varDecl) {return varDecl;},
        function(type, declarations) {
        		  
        			declarations.forEach(n=>{
                //初期化式の型チェック
        				if(n.init && (n.init.type !== type)){
        					error("初期値の型が宣言する変数の型と一致しません。");
        				}
        				n.type = type;
                // スコープに登録する
                scope.define(n);
        				//console.log(n);
                // グローバル変数どうか
                n.global = funcScope.global;
                // 変数インデックス
                funcScope.index(n);
                // グローバル変数
                if(n.global){
                  //wasmModule.addGlobal(n.value, getBinaryenType(n.type.name) ,true, n.init );
                }
        			});
        		  	
              return {
                nodeType: "VariableDeclaration",
                type:type,
                declarations: declarations,
                kind: "var"
              };
            },
        function(type) { return primitiveTypes.get(type);},
        function(id, init) {
              return {
                nodeType: "VariableDeclarator",
                id: id,
                init: extractOptional(init, 1)
              };
            },
        function() { return { nodeType: "EmptyStatement" }; },
        function(expression) {
              return {
                nodeType: "ExpressionStatement",
                expression: expression
              };
            },
        function(test, consequent, alternate) {
              return {
                nodeType: "IfStatement",
                test: test,
                consequent: consequent,
                alternate: alternate
              };
            },
        function(test, consequent) {
              return {
                nodeType: "IfStatement",
                test: test,
                consequent: consequent,
                alternate: null
              };
            },
        function(body, test) { return { nodeType: "DoWhileStatement", body: body, test: test }; },
        function(test, body) { return { nodeType: "WhileStatement", test: test, body: body }; },
        function(init, test, update, body) {
              return {
                nodeType: "ForStatement",
                init: extractOptional(init, 0),
                test: extractOptional(test, 0),
                update: extractOptional(update, 0),
                body: body
              };
            },
        function(declarations, test, update, body) {
              return {
                nodeType: "ForStatement",
                init: {
                  nodeType: "VariableDeclaration",
                  declarations: declarations,
                  kind: "var"
                },
                test: extractOptional(test, 0),
                update: extractOptional(update, 0),
                body: body
              };
            },
        function(left, right, body) {
              return {
                nodeType: "ForInStatement",
                left: left,
                right: right,
                body: body
              };
            },
        function(declarations, right, body) {
              return {
                nodeType: "ForInStatement",
                left: {
                  nodeType: "VariableDeclaration",
                  declarations: declarations,
                  kind: "var"
                },
                right: right,
                body: body
              };
            },
        function() {
              return { nodeType: "ContinueStatement", label: null };
            },
        function(label) {
              return { nodeType: "ContinueStatement", label: label };
            },
        function() {
              return { nodeType: "BreakStatement", label: null };
            },
        function(label) {
              return { nodeType: "BreakStatement", label: label };
            },
        function() {
              return { nodeType: "ReturnStatement", argument: null };
            },
        function(argument) {
              return { nodeType: "ReturnStatement", argument: argument };
            },
        function(object, body) { return { nodeType: "WithStatement", object: object, body: body }; },
        function(discriminant, cases) {
              return {
                nodeType: "SwitchStatement",
                discriminant: discriminant,
                cases: cases
              };
            },
        function(clauses) {
              return optionalList(extractOptional(clauses, 0));
            },
        function(before, default_, after) {
              return optionalList(extractOptional(before, 0))
                .concat(default_)
                .concat(optionalList(extractOptional(after, 0)));
            },
        function(test, consequent) {
              return {
                nodeType: "SwitchCase",
                test: test,
                consequent: optionalList(extractOptional(consequent, 1))
              };
            },
        function(consequent) {
              return {
                nodeType: "SwitchCase",
                test: null,
                consequent: optionalList(extractOptional(consequent, 1))
              };
            },
        function(label, body) {
              return { nodeType: "LabeledStatement", label: label, body: body };
            },
        function(argument) {
              return { nodeType: "ThrowStatement", argument: argument };
            },
        function(block, handler, finalizer) {
              return {
                nodeType: "TryStatement",
                block: block,
                handler: handler,
                finalizer: finalizer
              };
            },
        function(block, handler) {
              return {
                nodeType: "TryStatement",
                block: block,
                handler: handler,
                finalizer: null
              };
            },
        function(block, finalizer) {
              return {
                nodeType: "TryStatement",
                block: block,
                handler: null,
                finalizer: finalizer
              };
            },
        function(param, body) {
              return {
                nodeType: "CatchClause",
                param: param,
                body: body
              };
            },
        function(block) { return block; },
        function() { return { nodeType: "DebuggerStatement" }; },
        function(export_, returnType, id, params_) {
                // console.log(params_[0]);
                // スコープの新規作成
                createScope();
                funcScope.scopeIn();
                // パラメータをスコープに登録する
                params_[0].forEach(p=>{
                  scope.define(p);
                  funcScope.index(p);
                });
                return params_;
              },
        function(export_, returnType, id, params, body) { 
              let node = {
                nodeType: "FunctionDeclaration",
                returnType:returnType,
                export:!!export_,
                id: id,
                params: optionalList(extractOptional(params, 0)),
                body: body
              };
              /********************
               * wasm関数の定義 
               *******************
              const paramTypes = params[0].map(p=>getBinaryenType(p.type.name));
              const localVars = funcScope.localVars.map(l=>getBinaryenType(l.type.name));
              const funcType = wasmModule.addFunctionType(id.name, getBinaryenType(returnType.name), paramTypes);
              wasmModule.addFunction(id, funcType, localVars, wasmModule.block(null,body));
              if (!!export_) {
                wasmModule.addFunctionExport(id.name, id.name);
              }
             */ 
              scope.pop();
              funcScope.scopeOut();
              return node;
            },
        function(type, id) {
        		return {
        			type:type,
        			id:id,
        			nodeType:'FunctionlParameter'
        		};
        	},
        function(body) {
              return {
                nodeType: "BlockStatement",
                body: optionalList(body)
              };
            },
        function(body) {
              //return wasmModule;
              return {
                nodeType: "Program",
                body: optionalList(body),
                wasmModule:wasmModule
              };
            },
        function(head, tail) {
              return buildList(head, tail, 1);
            }
      ],

      peg$bytecode = [
        peg$decode("%;\x9B/:#;\xFE/1$;\x9B/($8#: #!!)(#'#(\"'#&'#"),
        peg$decode("1\"\"5!7!"),
        peg$decode("<2#\"\"6#7$._ &2%\"\"6%7&.S &2'\"\"6'7(.G &2)\"\"6)7*.; &2+\"\"6+7,./ &2-\"\"6-7..# &;g=.\" 7\""),
        peg$decode("4/\"\"5!70"),
        peg$decode("<22\"\"6273.M &24\"\"6475.A &26\"\"6677.5 &28\"\"6879.) &2:\"\"6:7;=.\" 71"),
        peg$decode("<;&.# &;(=.\" 7<"),
        peg$decode("%2=\"\"6=7>/\x8C#$%%<2?\"\"6?7@=.##&&!&'#/,#;!/#$+\")(\"'#&'#0H*%%<2?\"\"6?7@=.##&&!&'#/,#;!/#$+\")(\"'#&'#&/2$2?\"\"6?7@/#$+#)(#'#(\"'#&'#"),
        peg$decode("%2=\"\"6=7>/\x98#$%%<2?\"\"6?7@.# &;#=.##&&!&'#/,#;!/#$+\")(\"'#&'#0N*%%<2?\"\"6?7@.# &;#=.##&&!&'#/,#;!/#$+\")(\"'#&'#&/2$2?\"\"6?7@/#$+#)(#'#(\"'#&'#"),
        peg$decode("%2A\"\"6A7B/q#$%%<;#=.##&&!&'#/,#;!/#$+\")(\"'#&'#0B*%%<;#=.##&&!&'#/,#;!/#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),
        peg$decode("%%<;/=.##&&!&'#/1#;*/($8\":C\"! )(\"'#&'#"),
        peg$decode("<%;+/9#$;,0#*;,&/)$8\":E\"\"! )(\"'#&'#=.\" 7D"),
        peg$decode(";-.Y &2F\"\"6F7G.M &2H\"\"6H7I.A &%2J\"\"6J7K/1#;S/($8\":L\"! )(\"'#&'#"),
        peg$decode(";+.G &;..A &;d.; &;f.5 &2M\"\"6M7N.) &2O\"\"6O7P"),
        peg$decode(";a.; &;].5 &;`./ &;^.) &;_.# &;e"),
        peg$decode(";c.# &;b"),
        peg$decode(";0.5 &;1./ &;3.) &;4.# &;\xDE"),
        peg$decode(";i.\x89 &;j.\x83 &;n.} &;m.w &;o.q &;q.k &;s.e &;t._ &;v.Y &;|.S &;\x82.M &;\x83.G &;\x86.A &;\x88.; &;\x8C.5 &;\x96./ &;\x95.) &;\x98.# &;\x99"),
        peg$decode(";l.q &;k.k &;p.e &;r._ &;u.Y &;w.S &;{.M &;\x85.G &;\x84.A &;\x8B.; &;\x91.5 &;\x92./ &;\x94.) &;\x97.# &;\x9A"),
        peg$decode(";3.5 &;4./ &;5.) &;I.# &;T"),
        peg$decode("%;\x87/& 8!:Q! )"),
        peg$decode("%;\x93/& 8!:R! ).. &%;x/& 8!:S! )"),
        peg$decode("<%;>/C#%<;+.# &;8=.##&&!&'#/($8\":U\"!!)(\"'#&'#.} &%;6/C#%<;+.# &;8=.##&&!&'#/($8\":U\"!!)(\"'#&'#.M &%;@/C#%<;+.# &;8=.##&&!&'#/($8\":U\"!!)(\"'#&'#=.\" 7T"),
        peg$decode("%;=.\" &\"/\xE7#%%;7/P#2V\"\"6V7W/A$$;80#*;8&/1$;:.\" &\"/#$+$)($'#(#'#(\"'#&'#.| &%2V\"\"6V7W/G#$;8/&#0#*;8&&&#/1$;:.\" &\"/#$+#)(#'#(\"'#&'#.B &%%;7/1#;:.\" &\"/#$+\")(\"'#&'#/\"!&,)/\"!&,)/A$;F.\" &\"/3$;H/*$8$:X$##\"!)($'#(#'#(\"'#&'#.f &%;=.\" &\"/W#%;7/\"!&,)/G$;B.\" &\"/9$;G.\" &\"/+$8$:Y$$#\"! )($'#(#'#(\"'#&'#"),
        peg$decode("2Z\"\"6Z7[.= &%;9/3#$;80#*;8&/#$+\")(\"'#&'#"),
        peg$decode("4\\\"\"5!7]"),
        peg$decode("4^\"\"5!7_"),
        peg$decode("%;;/,#;</#$+\")(\"'#&'#"),
        peg$decode("3`\"\"5!7a"),
        peg$decode("%;=.\" &\"/9#$;8/&#0#*;8&&&#/#$+\")(\"'#&'#"),
        peg$decode("4b\"\"5!7c"),
        peg$decode("%4b\"\"5!7c.\" &\"/\xA5#3d\"\"5\"7e/\x96$$;?./ &;\".) &;$.# &;%/8#05*;?./ &;\".) &;$.# &;%&&&#/\\$3f\"\"5!7g/M$;B.\" &\"/?$;G.# &;H.\" &\"/+$8&:h&$%#! )(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("4i\"\"5!7j"),
        peg$decode("%4b\"\"5!7c.\" &\"/\xA5#3k\"\"5\"7l/\x96$$;A./ &;\".) &;$.# &;%/8#05*;A./ &;\".) &;$.# &;%&&&#/\\$3m\"\"5!7n/M$;B.\" &\"/?$;G.# &;H.\" &\"/+$8&:o&$%#! )(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("4p\"\"5!7q"),
        peg$decode(";C./ &;D.) &;E.# &;F"),
        peg$decode("2r\"\"6r7s"),
        peg$decode("2t\"\"6t7u"),
        peg$decode("2v\"\"6v7w"),
        peg$decode("2x\"\"6x7y"),
        peg$decode("2z\"\"6z7{"),
        peg$decode("2|\"\"6|7}"),
        peg$decode("<%2\x7F\"\"6\x7F7\x80/G#$;J0#*;J&/7$2\x7F\"\"6\x7F7\x80/($8#:\x81#!!)(#'#(\"'#&'#.W &%2\x82\"\"6\x827\x83/G#$;K0#*;K&/7$2\x82\"\"6\x827\x83/($8#:\x81#!!)(#'#(\"'#&'#=.\" 7~"),
        peg$decode("%%<2\x7F\"\"6\x7F7\x80./ &2J\"\"6J7K.# &;#=.##&&!&'#/0#;!/'$8\":\x84\" )(\"'#&'#.G &%2J\"\"6J7K/1#;M/($8\":L\"! )(\"'#&'#.# &;L"),
        peg$decode("%%<2\x82\"\"6\x827\x83./ &2J\"\"6J7K.# &;#=.##&&!&'#/0#;!/'$8\":\x84\" )(\"'#&'#.G &%2J\"\"6J7K/1#;M/($8\":L\"! )(\"'#&'#.# &;L"),
        peg$decode("%2J\"\"6J7K/0#;$/'$8\":\x85\" )(\"'#&'#"),
        peg$decode(";N.X &%2Z\"\"6Z7[/<#%<;8=.##&&!&'#/'$8\":\x86\" )(\"'#&'#.) &;R.# &;S"),
        peg$decode(";O.# &;P"),
        peg$decode("2\x82\"\"6\x827\x83.\xBF &2\x7F\"\"6\x7F7\x80.\xB3 &2J\"\"6J7K.\xA7 &%2m\"\"6m7\x87/& 8!:\x88! ).\x90 &%2|\"\"6|7}/& 8!:\x89! ).y &%2\x8A\"\"6\x8A7\x8B/& 8!:\x8C! ).b &%2\x8D\"\"6\x8D7\x8E/& 8!:\x8F! ).K &%2\x90\"\"6\x907\x91/& 8!:\x92! ).4 &%2\x93\"\"6\x937\x94/& 8!:\x95! )"),
        peg$decode("%%<;Q.# &;#=.##&&!&'#/0#;!/'$8\":\x84\" )(\"'#&'#"),
        peg$decode(";O.; &;8.5 &2f\"\"6f7\x96.) &2z\"\"6z7{"),
        peg$decode("%2f\"\"6f7\x96/K#%%;?/,#;?/#$+\")(\"'#&'#/\"!&,)/($8\":\x97\"! )(\"'#&'#"),
        peg$decode("%2z\"\"6z7{/]#%%;?/>#;?/5$;?/,$;?/#$+$)($'#(#'#(\"'#&'#/\"!&,)/($8\":\x97\"! )(\"'#&'#"),
        peg$decode("<%2\x99\"\"6\x997\x9A/X#%;U/\"!&,)/H$2\x99\"\"6\x997\x9A/9$%;\\/\"!&,)/)$8$:\x9B$\"\" )($'#(#'#(\"'#&'#=.\" 7\x98"),
        peg$decode("%;V/3#$;W0#*;W&/#$+\")(\"'#&'#"),
        peg$decode("%%<4\x9C\"\"5!7\x9D=.##&&!&'#/,#;Y/#$+\")(\"'#&'#.) &;X.# &;Z"),
        peg$decode("%%<4\x9E\"\"5!7\x9F=.##&&!&'#/,#;Y/#$+\")(\"'#&'#.) &;X.# &;Z"),
        peg$decode("%2J\"\"6J7K/,#;Y/#$+\")(\"'#&'#"),
        peg$decode("%%<;#=.##&&!&'#/,#;!/#$+\")(\"'#&'#"),
        peg$decode("%2\xA0\"\"6\xA07\xA1/B#$;[0#*;[&/2$2\xA2\"\"6\xA27\xA3/#$+#)(#'#(\"'#&'#"),
        peg$decode("%%<4\xA4\"\"5!7\xA5=.##&&!&'#/,#;Y/#$+\")(\"'#&'#.# &;X"),
        peg$decode("$;,0#*;,&"),
        peg$decode("4\xA6\"\"5!7\xA7"),
        peg$decode("4\xA8\"\"5!7\xA9"),
        peg$decode("4\xAA\"\"5!7\xAB"),
        peg$decode("4\xAC\"\"5!7\xAD"),
        peg$decode("4\xAE\"\"5!7\xAF"),
        peg$decode("4\xB0\"\"5!7\xB1"),
        peg$decode("4\xB2\"\"5!7\xB3"),
        peg$decode("4\xB4\"\"5!7\xB5"),
        peg$decode("4\xB6\"\"5!7\xB7"),
        peg$decode("4\xB8\"\"5!7\xB9"),
        peg$decode("4\xBA\"\"5!7\xBB"),
        peg$decode("2\xBC\"\"6\xBC7\xBD"),
        peg$decode("%2\xBE\"\"6\xBE7\xBF/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xC0\"\"6\xC07\xC1/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xC2\"\"6\xC27\xC3/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xC4\"\"6\xC47\xC5/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xC6\"\"6\xC67\xC7/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xC8\"\"6\xC87\xC9/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xCA\"\"6\xCA7\xCB/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xCC\"\"6\xCC7\xCD/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xCE\"\"6\xCE7\xCF/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xD0\"\"6\xD07\xD1/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xD2\"\"6\xD27\xD3/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xD4\"\"6\xD47\xD5/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xD6\"\"6\xD67\xD7/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xD8\"\"6\xD87\xD9/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xDA\"\"6\xDA7\xDB/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xDC\"\"6\xDC7\xDD/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("2\xDE\"\"6\xDE7\xDF"),
        peg$decode("2\xE0\"\"6\xE07\xE1"),
        peg$decode("%2\xE2\"\"6\xE27\xE3/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xE4\"\"6\xE47\xE5/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xE6\"\"6\xE67\xE7/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("2\xE8\"\"6\xE87\xE9"),
        peg$decode("2\xEA\"\"6\xEA7\xEB"),
        peg$decode("2\xEC\"\"6\xEC7\xED"),
        peg$decode("2\xEE\"\"6\xEE7\xEF"),
        peg$decode("%2\xF0\"\"6\xF07\xF1/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xF2\"\"6\xF27\xF3/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xF4\"\"6\xF47\xF5/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xF6\"\"6\xF67\xF7/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xF8\"\"6\xF87\xF9/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xFA\"\"6\xFA7\xFB/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xFC\"\"6\xFC7\xFD/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\xFE\"\"6\xFE7\xFF/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\u0100\"\"6\u01007\u0101/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\u0102\"\"6\u01027\u0103/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\u0104\"\"6\u01047\u0105/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("2\u0106\"\"6\u01067\u0107"),
        peg$decode("2\u0108\"\"6\u01087\u0109"),
        peg$decode("2\u010A\"\"6\u010A7\u010B"),
        peg$decode("2\u010C\"\"6\u010C7\u010D"),
        peg$decode("%2\u010E\"\"6\u010E7\u010F/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\u0110\"\"6\u01107\u0111/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\u0112\"\"6\u01127\u0113/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\u0114\"\"6\u01147\u0115/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("2\u0116\"\"6\u01167\u0117"),
        peg$decode("%2\u0118\"\"6\u01187\u0119/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\u011A\"\"6\u011A7\u011B/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("2\u011C\"\"6\u011C7\u011D"),
        peg$decode("%2\u011E\"\"6\u011E7\u011F/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("%2\u0120\"\"6\u01207\u0121/8#%<;,=.##&&!&'#/#$+\")(\"'#&'#"),
        peg$decode("$;\".) &;$.# &;%0/*;\".) &;$.# &;%&"),
        peg$decode("$;\".# &;'0)*;\".# &;'&"),
        peg$decode("%;\x9B/2#2\u0122\"\"6\u01227\u0123/#$+\")(\"'#&'#"),
        peg$decode("%<1\"\"5!7!=.##&&!&'#"),
        peg$decode("%;\x91/& 8!:\u0124! ).z &;).t &;2.n &;\xA0.h &;\xA3.b &%2\u0125\"\"6\u01257\u0126/R#;\x9B/I$;\xD3/@$;\x9B/7$2\u0127\"\"6\u01277\u0128/($8%:\u0129%!\")(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%2\xA0\"\"6\xA07\xA1/a#;\x9B/X$%;\xA2/,#;\x9B/#$+\")(\"'#&'#.\" &\"/7$2\xA2\"\"6\xA27\xA3/($8$:\u012A$!!)($'#(#'#(\"'#&'#.\xE1 &%2\xA0\"\"6\xA07\xA1/R#;\x9B/I$;\xA1/@$;\x9B/7$2\xA2\"\"6\xA27\xA3/($8%:\u012B%!\")(%'#($'#(#'#(\"'#&'#.\x9C &%2\xA0\"\"6\xA07\xA1/\x8C#;\x9B/\x83$;\xA1/z$;\x9B/q$2\u012C\"\"6\u012C7\u012D/b$;\x9B/Y$%;\xA2/,#;\x9B/#$+\")(\"'#&'#.\" &\"/8$2\xA2\"\"6\xA27\xA3/)$8(:\u012E(\"%!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%%%;\xA2/,#;\x9B/#$+\")(\"'#&'#.\" &\"/2#;\xD0/)$8\":\u012F\"\"! )(\"'#&'#/\xDF#$%;\x9B/l#2\u012C\"\"6\u012C7\u012D/]$;\x9B/T$%;\xA2/,#;\x9B/#$+\")(\"'#&'#.\" &\"/3$;\xD0/*$8%:\u0130%#'! )(%'#($'#(#'#(\"'#&'#0v*%;\x9B/l#2\u012C\"\"6\u012C7\u012D/]$;\x9B/T$%;\xA2/,#;\x9B/#$+\")(\"'#&'#.\" &\"/3$;\xD0/*$8%:\u0130%#'! )(%'#($'#(#'#(\"'#&'#&/)$8\":\u0131\"\"! )(\"'#&'#"),
        peg$decode("%2\u012C\"\"6\u012C7\u012D/j#$%;\x9B/2#2\u012C\"\"6\u012C7\u012D/#$+\")(\"'#&'#0<*%;\x9B/2#2\u012C\"\"6\u012C7\u012D/#$+\")(\"'#&'#&/($8\":\u0132\"! )(\"'#&'#"),
        peg$decode("%2\u0133\"\"6\u01337\u0134/?#;\x9B/6$2\u0135\"\"6\u01357\u0136/'$8#:\u0137# )(#'#(\"'#&'#.\xBF &%2\u0133\"\"6\u01337\u0134/R#;\x9B/I$;\xA4/@$;\x9B/7$2\u0135\"\"6\u01357\u0136/($8%:\u0138%!\")(%'#($'#(#'#(\"'#&'#.z &%2\u0133\"\"6\u01337\u0134/j#;\x9B/a$;\xA4/X$;\x9B/O$2\u012C\"\"6\u012C7\u012D/@$;\x9B/7$2\u0135\"\"6\u01357\u0136/($8':\u0138'!$)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;\xA5/\x8F#$%;\x9B/D#2\u012C\"\"6\u012C7\u012D/5$;\x9B/,$;\xA5/#$+$)($'#(#'#(\"'#&'#0N*%;\x9B/D#2\u012C\"\"6\u012C7\u012D/5$;\x9B/,$;\xA5/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u0139\"\"! )(\"'#&'#"),
        peg$decode("%;\xA6/S#;\x9B/J$2\u013A\"\"6\u013A7\u013B/;$;\x9B/2$;\xD0/)$8%:\u013C%\"$ )(%'#($'#(#'#(\"'#&'#.\u0164 &%;}/\xAD#;\x9B/\xA4$;\xA6/\x9B$;\x9B/\x92$2\u0125\"\"6\u01257\u0126/\x83$;\x9B/z$2\u0127\"\"6\u01277\u0128/k$;\x9B/b$2\u0133\"\"6\u01337\u0134/S$;\x9B/J$;\xFD/A$;\x9B/8$2\u0135\"\"6\u01357\u0136/)$8-:\u013D-\"*\")(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xCA &%;\x89/\xC0#;\x9B/\xB7$;\xA6/\xAE$;\x9B/\xA5$2\u0125\"\"6\u01257\u0126/\x96$;\x9B/\x8D$;\xA7/\x84$;\x9B/{$2\u0127\"\"6\u01277\u0128/l$;\x9B/c$2\u0133\"\"6\u01337\u0134/T$;\x9B/K$;\xFD/B$;\x9B/9$2\u0135\"\"6\u01357\u0136/*$8/:\u013E/#,(\")(/'#(.'#(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode(";*.) &;I.# &;5"),
        peg$decode("%;)/' 8!:\u013F!! )"),
        peg$decode("%;\x9F.W &%;\x86/M#;\x9B/D$;\xA8/;$;\x9B/2$;\xAB/)$8%:\u0140%\"\" )(%'#($'#(#'#(\"'#&'#/\u0139#$%;\x9B/b#2\xA0\"\"6\xA07\xA1/S$;\x9B/J$;\xD3/A$;\x9B/8$2\xA2\"\"6\xA27\xA3/)$8&:\u0141&\"(\")(&'#(%'#($'#(#'#(\"'#&'#.T &%;\x9B/J#2V\"\"6V7W/;$;\x9B/2$;*/)$8$:\u0142$\"& )($'#(#'#(\"'#&'#0\xA3*%;\x9B/b#2\xA0\"\"6\xA07\xA1/S$;\x9B/J$;\xD3/A$;\x9B/8$2\xA2\"\"6\xA27\xA3/)$8&:\u0141&\"(\")(&'#(%'#($'#(#'#(\"'#&'#.T &%;\x9B/J#2V\"\"6V7W/;$;\x9B/2$;*/)$8$:\u0142$\"& )($'#(#'#(\"'#&'#&/)$8\":\u0143\"\"! )(\"'#&'#"),
        peg$decode(";\xA8.D &%;\x86/:#;\x9B/1$;\xA9/($8#:\u0144#! )(#'#(\"'#&'#"),
        peg$decode("%%;\xA8/;#;\x9B/2$;\xAB/)$8#:\u0145#\"\" )(#'#(\"'#&'#/\u0177#$%;\x9B/2#;\xAB/)$8\":\u0146\"\"$ )(\"'#&'#.\xA3 &%;\x9B/b#2\xA0\"\"6\xA07\xA1/S$;\x9B/J$;\xD3/A$;\x9B/8$2\xA2\"\"6\xA27\xA3/)$8&:\u0147&\"(\")(&'#(%'#($'#(#'#(\"'#&'#.T &%;\x9B/J#2V\"\"6V7W/;$;\x9B/2$;*/)$8$:\u0148$\"& )($'#(#'#(\"'#&'#0\xC2*%;\x9B/2#;\xAB/)$8\":\u0146\"\"$ )(\"'#&'#.\xA3 &%;\x9B/b#2\xA0\"\"6\xA07\xA1/S$;\x9B/J$;\xD3/A$;\x9B/8$2\xA2\"\"6\xA27\xA3/)$8&:\u0147&\"(\")(&'#(%'#($'#(#'#(\"'#&'#.T &%;\x9B/J#2V\"\"6V7W/;$;\x9B/2$;*/)$8$:\u0148$\"& )($'#(#'#(\"'#&'#&/)$8\":\u0149\"\"! )(\"'#&'#"),
        peg$decode("%2\u0125\"\"6\u01257\u0126/a#;\x9B/X$%;\xAC/,#;\x9B/#$+\")(\"'#&'#.\" &\"/7$2\u0127\"\"6\u01277\u0128/($8$:\u014A$!!)($'#(#'#(\"'#&'#"),
        peg$decode("%;\xD0/\x8F#$%;\x9B/D#2\u012C\"\"6\u012C7\u012D/5$;\x9B/,$;\xD0/#$+$)($'#(#'#(\"'#&'#0N*%;\x9B/D#2\u012C\"\"6\u012C7\u012D/5$;\x9B/,$;\xD0/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u0139\"\"! )(\"'#&'#"),
        peg$decode("%;\xAA.# &;\xA9/' 8!:\u014B!! )"),
        peg$decode("%;\xAD/;#;\x9C/2$;\xAF/)$8#:\u014C#\"\" )(#'#(\"'#&'#.# &;\xAD"),
        peg$decode("2\u014D\"\"6\u014D7\u014E.) &2\u014F\"\"6\u014F7\u0150"),
        peg$decode(";\xAE.E &%;\xB1/;#;\x9B/2$;\xB0/)$8#:\u0151#\"\" )(#'#(\"'#&'#"),
        peg$decode("%;r/\"!&,).\xD7 &%;\x98/\"!&,).\xCA &%;\x96/\"!&,).\xBD &2\u014D\"\"6\u014D7\u014E.\xB1 &2\u014F\"\"6\u014F7\u0150.\xA5 &%%2\u0152\"\"6\u01527\u0153/>#%<2\u0154\"\"6\u01547\u0155=.##&&!&'#/#$+\")(\"'#&'#/\"!&,).m &%%2\u0156\"\"6\u01567\u0157/>#%<2\u0154\"\"6\u01547\u0155=.##&&!&'#/#$+\")(\"'#&'#/\"!&,).5 &2\u0158\"\"6\u01587\u0159.) &2\u015A\"\"6\u015A7\u015B"),
        peg$decode("%;\xB0/\x83#$%;\x9B/>#;\xB3/5$;\x9B/,$;\xB0/#$+$)($'#(#'#(\"'#&'#0H*%;\x9B/>#;\xB3/5$;\x9B/,$;\xB0/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u015C\"\"! )(\"'#&'#"),
        peg$decode("%%2\u015D\"\"6\u015D7\u015E/>#%<2\u0154\"\"6\u01547\u0155=.##&&!&'#/#$+\")(\"'#&'#/\"!&,).\x8D &%%2\x99\"\"6\x997\x9A/>#%<2\u0154\"\"6\u01547\u0155=.##&&!&'#/#$+\")(\"'#&'#/\"!&,).U &%%2\u015F\"\"6\u015F7\u0160/>#%<2\u0154\"\"6\u01547\u0155=.##&&!&'#/#$+\")(\"'#&'#/\"!&,)"),
        peg$decode("%;\xB2/\x83#$%;\x9B/>#;\xB5/5$;\x9B/,$;\xB2/#$+$)($'#(#'#(\"'#&'#0H*%;\x9B/>#;\xB5/5$;\x9B/,$;\xB2/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u015C\"\"! )(\"'#&'#"),
        peg$decode("%%2\u0152\"\"6\u01527\u0153/>#%<4\u0161\"\"5!7\u0162=.##&&!&'#/#$+\")(\"'#&'#/\"!&,).U &%%2\u0156\"\"6\u01567\u0157/>#%<4\u0163\"\"5!7\u0164=.##&&!&'#/#$+\")(\"'#&'#/\"!&,)"),
        peg$decode("%;\xB4/\x83#$%;\x9B/>#;\xB7/5$;\x9B/,$;\xB4/#$+$)($'#(#'#(\"'#&'#0H*%;\x9B/>#;\xB7/5$;\x9B/,$;\xB4/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u015C\"\"! )(\"'#&'#"),
        peg$decode("%%2\u0165\"\"6\u01657\u0166/>#%<2\u0154\"\"6\u01547\u0155=.##&&!&'#/#$+\")(\"'#&'#/\"!&,).\x8D &%%2\u0167\"\"6\u01677\u0168/>#%<2\u0154\"\"6\u01547\u0155=.##&&!&'#/#$+\")(\"'#&'#/\"!&,).U &%%2\u0169\"\"6\u01697\u016A/>#%<2\u0154\"\"6\u01547\u0155=.##&&!&'#/#$+\")(\"'#&'#/\"!&,)"),
        peg$decode("%;\xB6/\x83#$%;\x9B/>#;\xB9/5$;\x9B/,$;\xB6/#$+$)($'#(#'#(\"'#&'#0H*%;\x9B/>#;\xB9/5$;\x9B/,$;\xB6/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u015C\"\"! )(\"'#&'#"),
        peg$decode("2\u016B\"\"6\u016B7\u016C.\xB3 &2\u016D\"\"6\u016D7\u016E.\xA7 &%%2\u016F\"\"6\u016F7\u0170/>#%<2\u016F\"\"6\u016F7\u0170=.##&&!&'#/#$+\")(\"'#&'#/\"!&,).o &%%2\u0171\"\"6\u01717\u0172/>#%<2\u0171\"\"6\u01717\u0172=.##&&!&'#/#$+\")(\"'#&'#/\"!&,).7 &%;\x84/\"!&,).* &%;\x85/\"!&,)"),
        peg$decode("%;\xB6/\x83#$%;\x9B/>#;\xBB/5$;\x9B/,$;\xB6/#$+$)($'#(#'#(\"'#&'#0H*%;\x9B/>#;\xBB/5$;\x9B/,$;\xB6/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u015C\"\"! )(\"'#&'#"),
        peg$decode("2\u016B\"\"6\u016B7\u016C.\xA6 &2\u016D\"\"6\u016D7\u016E.\x9A &%%2\u016F\"\"6\u016F7\u0170/>#%<2\u016F\"\"6\u016F7\u0170=.##&&!&'#/#$+\")(\"'#&'#/\"!&,).b &%%2\u0171\"\"6\u01717\u0172/>#%<2\u0171\"\"6\u01717\u0172=.##&&!&'#/#$+\")(\"'#&'#/\"!&,).* &%;\x84/\"!&,)"),
        peg$decode("%;\xB8/\x83#$%;\x9B/>#;\xBE/5$;\x9B/,$;\xB8/#$+$)($'#(#'#(\"'#&'#0H*%;\x9B/>#;\xBE/5$;\x9B/,$;\xB8/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u015C\"\"! )(\"'#&'#"),
        peg$decode("%;\xBA/\x83#$%;\x9B/>#;\xBE/5$;\x9B/,$;\xBA/#$+$)($'#(#'#(\"'#&'#0H*%;\x9B/>#;\xBE/5$;\x9B/,$;\xBA/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u015C\"\"! )(\"'#&'#"),
        peg$decode("2\u0173\"\"6\u01737\u0174.A &2\u0175\"\"6\u01757\u0176.5 &2\u0177\"\"6\u01777\u0178.) &2\u0179\"\"6\u01797\u017A"),
        peg$decode("%;\xBC/\x83#$%;\x9B/>#;\xC1/5$;\x9B/,$;\xBC/#$+$)($'#(#'#(\"'#&'#0H*%;\x9B/>#;\xC1/5$;\x9B/,$;\xBC/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u015C\"\"! )(\"'#&'#"),
        peg$decode("%;\xBD/\x83#$%;\x9B/>#;\xC1/5$;\x9B/,$;\xBD/#$+$)($'#(#'#(\"'#&'#0H*%;\x9B/>#;\xC1/5$;\x9B/,$;\xBD/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u015C\"\"! )(\"'#&'#"),
        peg$decode("%%2\u017B\"\"6\u017B7\u017C/>#%<4\u017D\"\"5!7\u017E=.##&&!&'#/#$+\")(\"'#&'#/\"!&,)"),
        peg$decode("%;\xBF/\x83#$%;\x9B/>#;\xC4/5$;\x9B/,$;\xBF/#$+$)($'#(#'#(\"'#&'#0H*%;\x9B/>#;\xC4/5$;\x9B/,$;\xBF/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u015C\"\"! )(\"'#&'#"),
        peg$decode("%;\xC0/\x83#$%;\x9B/>#;\xC4/5$;\x9B/,$;\xC0/#$+$)($'#(#'#(\"'#&'#0H*%;\x9B/>#;\xC4/5$;\x9B/,$;\xC0/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u015C\"\"! )(\"'#&'#"),
        peg$decode("%%2\u017F\"\"6\u017F7\u0180/>#%<2\u0154\"\"6\u01547\u0155=.##&&!&'#/#$+\")(\"'#&'#/\"!&,)"),
        peg$decode("%;\xC2/\x83#$%;\x9B/>#;\xC7/5$;\x9B/,$;\xC2/#$+$)($'#(#'#(\"'#&'#0H*%;\x9B/>#;\xC7/5$;\x9B/,$;\xC2/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u015C\"\"! )(\"'#&'#"),
        peg$decode("%;\xC3/\x83#$%;\x9B/>#;\xC7/5$;\x9B/,$;\xC3/#$+$)($'#(#'#(\"'#&'#0H*%;\x9B/>#;\xC7/5$;\x9B/,$;\xC3/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u015C\"\"! )(\"'#&'#"),
        peg$decode("%%2\u0181\"\"6\u01817\u0182/>#%<4\u0183\"\"5!7\u0184=.##&&!&'#/#$+\")(\"'#&'#/\"!&,)"),
        peg$decode("%;\xC5/\x83#$%;\x9B/>#;\xCA/5$;\x9B/,$;\xC5/#$+$)($'#(#'#(\"'#&'#0H*%;\x9B/>#;\xCA/5$;\x9B/,$;\xC5/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u0185\"\"! )(\"'#&'#"),
        peg$decode("%;\xC6/\x83#$%;\x9B/>#;\xCA/5$;\x9B/,$;\xC6/#$+$)($'#(#'#(\"'#&'#0H*%;\x9B/>#;\xCA/5$;\x9B/,$;\xC6/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u0185\"\"! )(\"'#&'#"),
        peg$decode("2\u0186\"\"6\u01867\u0187"),
        peg$decode("%;\xC8/\x83#$%;\x9B/>#;\xCD/5$;\x9B/,$;\xC8/#$+$)($'#(#'#(\"'#&'#0H*%;\x9B/>#;\xCD/5$;\x9B/,$;\xC8/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u0185\"\"! )(\"'#&'#"),
        peg$decode("%;\xC9/\x83#$%;\x9B/>#;\xCD/5$;\x9B/,$;\xC9/#$+$)($'#(#'#(\"'#&'#0H*%;\x9B/>#;\xCD/5$;\x9B/,$;\xC9/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u0185\"\"! )(\"'#&'#"),
        peg$decode("2\u0188\"\"6\u01887\u0189"),
        peg$decode("%;\xCB/~#;\x9B/u$2\u018A\"\"6\u018A7\u018B/f$;\x9B/]$;\xD0/T$;\x9B/K$2\u013A\"\"6\u013A7\u013B/<$;\x9B/3$;\xD0/*$8):\u018C)#($ )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.# &;\xCB"),
        peg$decode("%;\xCC/~#;\x9B/u$2\u018A\"\"6\u018A7\u018B/f$;\x9B/]$;\xD0/T$;\x9B/K$2\u013A\"\"6\u013A7\u013B/<$;\x9B/3$;\xD1/*$8):\u018C)#($ )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.# &;\xCC"),
        peg$decode("%;\xAD/\x82#9:\u018D ! -\"\"&!&#/n$;\x9B/e$2\u0154\"\"6\u01547\u0155/V$%<2\u0154\"\"6\u01547\u0155=.##&&!&'#/;$;\x9B/2$;\xD0/)$8':\u018E'\"& )(''#(&'#(%'#($'#(#'#(\"'#&'#.^ &%;\xAD/N#;\x9B/E$;\xD2/<$;\x9B/3$;\xD0/*$8%:\u018F%#$\" )(%'#($'#(#'#(\"'#&'#.# &;\xCE"),
        peg$decode("%;\xAD/n#;\x9B/e$2\u0154\"\"6\u01547\u0155/V$%<2\u0154\"\"6\u01547\u0155=.##&&!&'#/;$;\x9B/2$;\xD1/)$8&:\u0190&\"% )(&'#(%'#($'#(#'#(\"'#&'#.^ &%;\xAD/N#;\x9B/E$;\xD2/<$;\x9B/3$;\xD1/*$8%:\u0191%#$\" )(%'#($'#(#'#(\"'#&'#.# &;\xCF"),
        peg$decode("2\u0192\"\"6\u01927\u0193.\xAD &2\u0194\"\"6\u01947\u0195.\xA1 &2\u0196\"\"6\u01967\u0197.\x95 &2\u0198\"\"6\u01987\u0199.\x89 &2\u019A\"\"6\u019A7\u019B.} &2\u019C\"\"6\u019C7\u019D.q &2\u019E\"\"6\u019E7\u019F.e &2\u01A0\"\"6\u01A07\u01A1.Y &2\u01A2\"\"6\u01A27\u01A3.M &2\u01A4\"\"6\u01A47\u01A5.A &2\u01A6\"\"6\u01A67\u01A7.5 &2\u01A8\"\"6\u01A87\u01A9.) &2\u01AA\"\"6\u01AA7\u01AB"),
        peg$decode("%;\xD0/\x8F#$%;\x9B/D#2\u012C\"\"6\u012C7\u012D/5$;\x9B/,$;\xD0/#$+$)($'#(#'#(\"'#&'#0N*%;\x9B/D#2\u012C\"\"6\u012C7\u012D/5$;\x9B/,$;\xD0/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u01AC\"\"! )(\"'#&'#"),
        peg$decode("%;\xD1/\x8F#$%;\x9B/D#2\u012C\"\"6\u012C7\u012D/5$;\x9B/,$;\xD1/#$+$)($'#(#'#(\"'#&'#0N*%;\x9B/D#2\u012C\"\"6\u012C7\u012D/5$;\x9B/,$;\xD1/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u01AC\"\"! )(\"'#&'#"),
        peg$decode(";\xD6.q &;\xDB.k &;\xE7.e &;\xE8._ &;\xE9.Y &;\xEA.S &;\xEB.M &;\xEC.G &;\xED.A &;\xEE.; &;\xF4.5 &;\xEF./ &;\xF5.) &;\xF6.# &;\xF9"),
        peg$decode("%;\xD7/[#;\x9B/R$%;\xDA/,#;\x9B/#$+\")(\"'#&'#.\" &\"/1$;\xD9/($8$:\u01AD$!!)($'#(#'#(\"'#&'#"),
        peg$decode("%2\u0133\"\"6\u01337\u0134/& 8!:\u01AE! )"),
        peg$decode("2\u0133\"\"6\u01337\u0134"),
        peg$decode("%2\u0135\"\"6\u01357\u0136/& 8!:\u01AF! )"),
        peg$decode("%;\xD5/_#$%;\x9B/,#;\xD5/#$+\")(\"'#&'#06*%;\x9B/,#;\xD5/#$+\")(\"'#&'#&/)$8\":\u01B0\"\"! )(\"'#&'#"),
        peg$decode("%;\xDC/1#;\x9D/($8\":\u01B1\"!!)(\"'#&'#"),
        peg$decode("%;\xDD/;#;\x9B/2$;\xE1/)$8#:\u01B2#\"\" )(#'#(\"'#&'#"),
        peg$decode("%;\xDE/' 8!:\u01B3!! ).# &;\x95"),
        peg$decode(";\xDF.# &;\xE0"),
        peg$decode(";\x80./ &;\x81.) &;y.# &;z"),
        peg$decode(";\x98.M &;h.G &;\x8A.A &;~.; &;\x7F.5 &;\x8D./ &;\x8E.) &;\x8F.# &;\x90"),
        peg$decode("%;\xE3/\x8F#$%;\x9B/D#2\u012C\"\"6\u012C7\u012D/5$;\x9B/,$;\xE3/#$+$)($'#(#'#(\"'#&'#0N*%;\x9B/D#2\u012C\"\"6\u012C7\u012D/5$;\x9B/,$;\xE3/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u0139\"\"! )(\"'#&'#"),
        peg$decode("%;\xE4/\x8F#$%;\x9B/D#2\u012C\"\"6\u012C7\u012D/5$;\x9B/,$;\xE4/#$+$)($'#(#'#(\"'#&'#0N*%;\x9B/D#2\u012C\"\"6\u012C7\u012D/5$;\x9B/,$;\xE4/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u0139\"\"! )(\"'#&'#"),
        peg$decode("%;)/J#%;\x9B/,#;\xE5/#$+\")(\"'#&'#.\" &\"/)$8\":\u01B4\"\"! )(\"'#&'#"),
        peg$decode("%;)/J#%;\x9B/,#;\xE6/#$+\")(\"'#&'#.\" &\"/)$8\":\u01B4\"\"! )(\"'#&'#"),
        peg$decode("%2\u0154\"\"6\u01547\u0155/U#%<2\u0154\"\"6\u01547\u0155=.##&&!&'#/:$;\x9B/1$;\xD0/($8$:\u0129$! )($'#(#'#(\"'#&'#"),
        peg$decode("%2\u0154\"\"6\u01547\u0155/U#%<2\u0154\"\"6\u01547\u0155=.##&&!&'#/:$;\x9B/1$;\xD1/($8$:\u0129$! )($'#(#'#(\"'#&'#"),
        peg$decode("%2\u0122\"\"6\u01227\u0123/& 8!:\u01B5! )"),
        peg$decode("%%<2\u0133\"\"6\u01337\u0134=.##&&!&'#/:#;\xD3/1$;\x9D/($8#:\u01B6#!!)(#'#(\"'#&'#"),
        peg$decode("%;\x82/\xA2#;\x9B/\x99$2\u0125\"\"6\u01257\u0126/\x8A$;\x9B/\x81$;\xD3/x$;\x9B/o$2\u0127\"\"6\u01277\u0128/`$;\x9B/W$;\xD5/N$;\x9B/E$;t/<$;\x9B/3$;\xD5/*$8-:\u01B7-#($ )(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\x87 &%;\x82/}#;\x9B/t$2\u0125\"\"6\u01257\u0126/e$;\x9B/\\$;\xD3/S$;\x9B/J$2\u0127\"\"6\u01277\u0128/;$;\x9B/2$;\xD5/)$8):\u01B8)\"$ )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;s/\x98#;\x9B/\x8F$;\xD5/\x86$;\x9B/}$;\x99/t$;\x9B/k$2\u0125\"\"6\u01257\u0126/\\$;\x9B/S$;\xD3/J$;\x9B/A$2\u0127\"\"6\u01277\u0128/2$;\x9D/)$8,:\u01B9,\")#)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0394 &%;\x99/}#;\x9B/t$2\u0125\"\"6\u01257\u0126/e$;\x9B/\\$;\xD3/S$;\x9B/J$2\u0127\"\"6\u01277\u0128/;$;\x9B/2$;\xD5/)$8):\u01BA)\"$ )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u032A &%;|/\u0100#;\x9B/\xF7$2\u0125\"\"6\u01257\u0126/\xE8$;\x9B/\xDF$%;\xD4/,#;\x9B/#$+\")(\"'#&'#.\" &\"/\xBE$2\u0122\"\"6\u01227\u0123/\xAF$;\x9B/\xA6$%;\xD3/,#;\x9B/#$+\")(\"'#&'#.\" &\"/\x85$2\u0122\"\"6\u01227\u0123/v$;\x9B/m$%;\xD3/,#;\x9B/#$+\")(\"'#&'#.\" &\"/L$2\u0127\"\"6\u01277\u0128/=$;\x9B/4$;\xD5/+$8.:\u01BB.$)&# )(.'#(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u023D &%;|/\u0103#;\x9B/\xFA$2\u0125\"\"6\u01257\u0126/\xEB$;\x9B/\xE2$;\x97/\xD9$;\x9B/\xD0$;\xE2/\xC7$;\x9B/\xBE$2\u0122\"\"6\u01227\u0123/\xAF$;\x9B/\xA6$%;\xD3/,#;\x9B/#$+\")(\"'#&'#.\" &\"/\x85$2\u0122\"\"6\u01227\u0123/v$;\x9B/m$%;\xD3/,#;\x9B/#$+\")(\"'#&'#.\" &\"/L$2\u0127\"\"6\u01277\u0128/=$;\x9B/4$;\xD5/+$81:\u01BC1$*&# )(1'#(0'#(/'#(.'#(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u014D &%;|/\xA2#;\x9B/\x99$2\u0125\"\"6\u01257\u0126/\x8A$;\x9B/\x81$;\xAD/x$;\x9B/o$;\x85/f$;\x9B/]$;\xD3/T$;\x9B/K$2\u0127\"\"6\u01277\u0128/<$;\x9B/3$;\xD5/*$8-:\u01BD-#($ )(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xBE &%;|/\xB4#;\x9B/\xAB$2\u0125\"\"6\u01257\u0126/\x9C$;\x9B/\x93$;\x97/\x8A$;\x9B/\x81$;\xE2/x$;\x9B/o$;\x85/f$;\x9B/]$;\xD3/T$;\x9B/K$2\u0127\"\"6\u01277\u0128/<$;\x9B/3$;\xD5/*$8/:\u01BE/#($ )(/'#(.'#(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;n/0#;\x9D/'$8\":\u01BF\" )(\"'#&'#.M &%;n/C#;\x9C/:$;)/1$;\x9D/($8$:\u01C0$!!)($'#(#'#(\"'#&'#"),
        peg$decode("%;i/0#;\x9D/'$8\":\u01C1\" )(\"'#&'#.M &%;i/C#;\x9C/:$;)/1$;\x9D/($8$:\u01C2$!!)($'#(#'#(\"'#&'#"),
        peg$decode("%;\x88/0#;\x9D/'$8\":\u01C3\" )(\"'#&'#.M &%;\x88/C#;\x9C/:$;\xD3/1$;\x9D/($8$:\u01C4$!!)($'#(#'#(\"'#&'#"),
        peg$decode("%;\x9A/}#;\x9B/t$2\u0125\"\"6\u01257\u0126/e$;\x9B/\\$;\xD3/S$;\x9B/J$2\u0127\"\"6\u01277\u0128/;$;\x9B/2$;\xD5/)$8):\u01C5)\"$ )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;\x8C/}#;\x9B/t$2\u0125\"\"6\u01257\u0126/e$;\x9B/\\$;\xD3/S$;\x9B/J$2\u0127\"\"6\u01277\u0128/;$;\x9B/2$;\xF0/)$8):\u01C6)\"$ )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%2\u0133\"\"6\u01337\u0134/a#;\x9B/X$%;\xF1/,#;\x9B/#$+\")(\"'#&'#.\" &\"/7$2\u0135\"\"6\u01357\u0136/($8$:\u01C7$!!)($'#(#'#(\"'#&'#.\xA6 &%2\u0133\"\"6\u01337\u0134/\x96#;\x9B/\x8D$%;\xF1/,#;\x9B/#$+\")(\"'#&'#.\" &\"/l$;\xF3/c$;\x9B/Z$%;\xF1/,#;\x9B/#$+\")(\"'#&'#.\" &\"/9$2\u0135\"\"6\u01357\u0136/*$8':\u01C8'#$#!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;\xF2/_#$%;\x9B/,#;\xF2/#$+\")(\"'#&'#06*%;\x9B/,#;\xF2/#$+\")(\"'#&'#&/)$8\":\u01B0\"\"! )(\"'#&'#"),
        peg$decode("%;j/t#;\x9B/k$;\xD3/b$;\x9B/Y$2\u013A\"\"6\u013A7\u013B/J$%;\x9B/,#;\xDA/#$+\")(\"'#&'#.\" &\"/)$8&:\u01C9&\"# )(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;q/a#;\x9B/X$2\u013A\"\"6\u013A7\u013B/I$%;\x9B/,#;\xDA/#$+\")(\"'#&'#.\" &\"/($8$:\u01CA$! )($'#(#'#(\"'#&'#"),
        peg$decode("%;)/S#;\x9B/J$2\u013A\"\"6\u013A7\u013B/;$;\x9B/2$;\xD5/)$8%:\u01CB%\"$ )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;\x92/C#;\x9C/:$;\xD3/1$;\x9D/($8$:\u01CC$!!)($'#(#'#(\"'#&'#"),
        peg$decode("%;\x94/`#;\x9B/W$;\xD6/N$;\x9B/E$;\xF7/<$;\x9B/3$;\xF8/*$8':\u01CD'#$\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.\x91 &%;\x94/M#;\x9B/D$;\xD6/;$;\x9B/2$;\xF7/)$8%:\u01CE%\"\" )(%'#($'#(#'#(\"'#&'#.W &%;\x94/M#;\x9B/D$;\xD6/;$;\x9B/2$;\xF8/)$8%:\u01CF%\"\" )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;k/}#;\x9B/t$2\u0125\"\"6\u01257\u0126/e$;\x9B/\\$;)/S$;\x9B/J$2\u0127\"\"6\u01277\u0128/;$;\x9B/2$;\xD6/)$8):\u01D0)\"$ )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;{/:#;\x9B/1$;\xD6/($8#:\u01D1#! )(#'#(\"'#&'#"),
        peg$decode("%;p/0#;\x9D/'$8\":\u01D2\" )(\"'#&'#"),
        peg$decode("%;v.\" &\"/\xF2#;\x9B/\xE9$;\xDD/\xE0$;\x9B/\xD7$;)/\xCE$;\x9B/\xC5$2\u0125\"\"6\u01257\u0126/\xB6$;\x9B/\xAD$%%;\xFB/,#;\x9B/#$+\")(\"'#&'#.\" &\"/* 8!:\u01D3!$)'% )/}$2\u0127\"\"6\u01277\u0128/n$;\x9B/e$2\u0133\"\"6\u01337\u0134/V$;\x9B/M$;\xFD/D$;\x9B/;$2\u0135\"\"6\u01357\u0136/,$80:\u01D40%/-+'\")(0'#(/'#(.'#(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;\xFC/\x8F#$%;\x9B/D#2\u012C\"\"6\u012C7\u012D/5$;\x9B/,$;\xFC/#$+$)($'#(#'#(\"'#&'#0N*%;\x9B/D#2\u012C\"\"6\u012C7\u012D/5$;\x9B/,$;\xFC/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u0139\"\"! )(\"'#&'#"),
        peg$decode("%;\xDD/;#;\x9B/2$;)/)$8#:\u01D5#\"\" )(#'#(\"'#&'#"),
        peg$decode("%;\xFF.\" &\"/' 8!:\u01D6!! )"),
        peg$decode("%;\xFF.\" &\"/' 8!:\u01D7!! )"),
        peg$decode("%;\u0100/_#$%;\x9B/,#;\u0100/#$+\")(\"'#&'#06*%;\x9B/,#;\u0100/#$+\")(\"'#&'#&/)$8\":\u01D8\"\"! )(\"'#&'#"),
        peg$decode(";\xD5.# &;\xFA")
      ],

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleIndices)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleIndex = peg$startRuleIndices[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$decode(s) {
    var bc = new Array(s.length), i;

    for (i = 0; i < s.length; i++) {
      bc[i] = s.charCodeAt(i) - 32;
    }

    return bc;
  }

  function peg$parseRule(index) {
    var bc    = peg$bytecode[index],
        ip    = 0,
        ips   = [],
        end   = bc.length,
        ends  = [],
        stack = [],
        params, i;

    while (true) {
      while (ip < end) {
        switch (bc[ip]) {
          case 0:
            stack.push(peg$consts[bc[ip + 1]]);
            ip += 2;
            break;

          case 1:
            stack.push(void 0);
            ip++;
            break;

          case 2:
            stack.push(null);
            ip++;
            break;

          case 3:
            stack.push(peg$FAILED);
            ip++;
            break;

          case 4:
            stack.push([]);
            ip++;
            break;

          case 5:
            stack.push(peg$currPos);
            ip++;
            break;

          case 6:
            stack.pop();
            ip++;
            break;

          case 7:
            peg$currPos = stack.pop();
            ip++;
            break;

          case 8:
            stack.length -= bc[ip + 1];
            ip += 2;
            break;

          case 9:
            stack.splice(-2, 1);
            ip++;
            break;

          case 10:
            stack[stack.length - 2].push(stack.pop());
            ip++;
            break;

          case 11:
            stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
            ip += 2;
            break;

          case 12:
            stack.push(input.substring(stack.pop(), peg$currPos));
            ip++;
            break;

          case 13:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1]) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 14:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] === peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 15:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] !== peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 16:
            if (stack[stack.length - 1] !== peg$FAILED) {
              ends.push(end);
              ips.push(ip);

              end = ip + 2 + bc[ip + 1];
              ip += 2;
            } else {
              ip += 2 + bc[ip + 1];
            }

            break;

          case 17:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (input.length > peg$currPos) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 18:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 19:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 20:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 21:
            stack.push(input.substr(peg$currPos, bc[ip + 1]));
            peg$currPos += bc[ip + 1];
            ip += 2;
            break;

          case 22:
            stack.push(peg$consts[bc[ip + 1]]);
            peg$currPos += peg$consts[bc[ip + 1]].length;
            ip += 2;
            break;

          case 23:
            stack.push(peg$FAILED);
            if (peg$silentFails === 0) {
              peg$fail(peg$consts[bc[ip + 1]]);
            }
            ip += 2;
            break;

          case 24:
            peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
            ip += 2;
            break;

          case 25:
            peg$savedPos = peg$currPos;
            ip++;
            break;

          case 26:
            params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
            for (i = 0; i < bc[ip + 3]; i++) {
              params[i] = stack[stack.length - 1 - params[i]];
            }

            stack.splice(
              stack.length - bc[ip + 2],
              bc[ip + 2],
              peg$consts[bc[ip + 1]].apply(null, params)
            );

            ip += 4 + bc[ip + 3];
            break;

          case 27:
            stack.push(peg$parseRule(bc[ip + 1]));
            ip += 2;
            break;

          case 28:
            peg$silentFails++;
            ip++;
            break;

          case 29:
            peg$silentFails--;
            ip++;
            break;

          default:
            throw new Error("Invalid opcode: " + bc[ip] + ".");
        }
      }

      if (ends.length > 0) {
        end = ends.pop();
        ip = ips.pop();
      } else {
        break;
      }
    }

    return stack[0];
  }


            
    // 関数スコープ
    class FunctionScope {
      constructor() {
        this.funcVars = [];
        this.length = 0;
        this.scopeIn();
      }

      scopeIn() {
        this.funcVars.push({index:0,localVars:[]});
        this.length = this.funcVars.length;
        this.stackTop = this.length - 1;
        this.current = this.funcVars[0];
      }

      scopeOut() {
        if (this.length == 0) throw new Error('配列インデックスの上限を超えています。');

        this.funcVars.pop();
        this.length = this.funcVars.length;
        if (this.length > 1) {
          this.stackTop = this.length - 1;
          this.current = this.funcVars[this.stackTop];
        } 
      }

      index(localVar,inc = true) {
        this.current.localVars.push[localVar];
        if (inc) {
          localVar.index = this.current.index;
          this.incIndex();
          return ret;
        } else {
          localVar.index = this.current.index;
        }
      }

      incIndex() {
        ++this.current.index;
        //this.funcVars[this.stackTop] = this.current;
      }

      get global() {
        return this.length == 1;
      }

      get localVars(){
        return this.current.localVars;
      }  
    }

    let scope;

    function createScope() {
        const s = new Scope(scope);
        scope = s;
        return s;
    }

    // スコープ管理
    class Scope {
      constructor(s) {
        this.def = new Map();
        this.typedef = new Map();
        this.parent = s;
      }

      define(node) {
        const def = (node.nodeType == 'VariableDeclarator' || node.nodeType == 'FunctionlParameter') ? this.def: this.typedef;
        const name = node.id.name;
        const t = def.get(name);
        if (t) {
          error('変数はすでに定義されています。');
        }
        def.set(name, node);
        node.scope = this;
      }

      find(nodeName,typedef = false,currentScope = false) {
        if (!typedef) {
          let e = this;
          let node;
          while (true) {
            node = e.def.get(nodeName);
            if (node) {
              return node;
            }
            if(currentScope) return null;
            e = e.parent;
            if (!e) {
              return null;
            }
          }
        } else {
          let e = this;
          let node;
          while (e) {
            node = e.typedef.get(nodeName);
            if (node) {
              return node;
            }
            if(currentScope) return null;
            e = e.parent;
          }
          return null;
        }
      }
      pop() {
        scope = this.parent;
      }
    }

    let funcScope = new FunctionScope();
    let scopeTop = createScope(); 

    const binaryen = options.binaryen;
    const wasmModule = options.module;
    
    const lib = options.lib;
    lib.i64Extend(-1);
    let ret = new Uint32Array(lib.memory.buffer);
    const I64MIN_VALUE={low:ret[0],high:ret[1]};
    const primitiveTypes = new Map([
      ['i8', {name:'i8',size:1,bitSize:8,byteSize:1,max:127,min:-128,integer:true,signed:true,innerType:'i32',kind:'Emulation'}],
      ['i16',{name:'i16',size:2,bitSize:16,byteSize:2,max:32767,min:-32768,integer:true,signed:true,innerType:'i32',kind:'Emulation'}],
      ['i32',{name:'i32',size:4,bitSize:32,byteSize:4,max:0x7fffffff,min:-0x80000000,integer:true,signed:true,innerType:'i32',kind:'Native'}],
      ['i64',{name:'i64',size:8,bitSize:64,byteSize:8,max:{low:0xffffffff,high:0x7fffffff},min:I64MIN_VALUE,integer:true,signed:true,innerType:'i64',kind:'Native'}], 
      ['u8',{name:'u8',size:1,bitSize:8,byteSize:1,max:255,min:0,integer:true,signed:false,innerType:'i32',kind:'Emulation'}],
      ['u16',{name:'i16',size:2,bitSize:16,byteSize:2,max:65535,min:0,integer:true,signed:false,innerType:'i32',kind:'Emulation'}],
      ['u32',{name:'u32',size:4,bitSize:32,byteSize:4,max:0xffffffff,min:0,integer:true,signed:false,innerType:'i32',kind:'Emulation'}],
      ['u64',{name:'u64',size:8,bitSize:64,byteSize:8,max:{low:0xffffffff,high:0xffffffff},min:{low:0,high:0},integer:true,signed:false,innerType:'i64',kind:'Emulation'}],
      ['f32',{name:'f32',size:4,bitSize:32,byteSize:4,max:3.402823466e+38,min:1.175494351e-38,integer:false,innerType:'f32',kind:'Native'}],
      ['f64',{name:'f64',size:8,bitSize:64,byteSize:8,max:Number.MAX_VALUE,min:Number.MIN_VALUE,integer:false,innerType:'f64',kind:'Native'}],
      ['void',{name:'void',size:0,kind:'Emulation'}],
      ['string',{name:'string',kind:'Emulation'}]
    ]);

    const byteSizeSuffixMap = new Map([
  	['s',{i:'i8',u:'u8'}],
  	['w',{i:'i16',u:'u16'}],
  	['d',{i:'i32',u:'u32',f:'f32'}],
  	['l',{i:'i64',u:'u64',f:'f64'}]
    ]);
    
    byteSizeSuffixMap.forEach((v,k,m)=>{
      for(let p in v){
        v[p] = primitiveTypes.get(v[p]);
      }
    });

    var TYPES_TO_PROPERTY_NAMES = {
      CallExpression:   "callee",
      MemberExpression: "object",
    };

    function filledArray(count, value) {
      return Array.apply(null, new Array(count))
        .map(function() { return value; });
    }

    function extractOptional(optional, index) {
      return optional ? optional[index] : null;
    }

    function extractList(list, index) {
      return list.map(function(element) { return element[index]; });
    }

    function buildList(head, tail, index) {
      return [head].concat(extractList(tail, index));
    }

    function buildBinaryExpression(head, tail) {
      return tail.reduce(function(result, element) {
        return {
          nodeType: "BinaryExpression",
          operator: element[1],
          left: result,
          right: element[3]
        };
      }, head);
    }

    function buildLogicalExpression(head, tail) {
      return tail.reduce(function(result, element) {
        return {
          nodeType: "LogicalExpression",
          operator: element[1],
          left: result,
          right: element[3]
        };
      }, head);
    }

    function optionalList(value) {
      return value !== null ? value : [];
    }

    /**
    * 整数文字列を64ビットの16進数文字列に変換するコード
    */

    // 整数は文字列の形で指定
    //let numString = '-9223372036854775807';
    //let numString = '9223372036854775809';
    function decimalToHex(numString) {
      let numArray = [];
      let minus = false;
      // 数値文字列を分割して配列に保存する
      {
        let i = 0;
        for (const c of numString) {
          if (c == '-') {
            if (i == 0) {
              minus = true;
            } else {
              throw new Error(`不正な文字:${c}`);
            }
          } else {
            if (isNaN(c)) {
              throw new Error(`不正な文字:${c}`);
            }
            numArray.push(parseInt(c, 10));
          }
          ++i;
        }
      }

      // 変換結果を収める
      let hex = [];
      let b = 0;
      let ans = [];
      let remind = 0;

      while (numArray.length > 0 || b > 15) {
        b = 0;
        ans = [];
        remind = 0;
        numArray.forEach(num => {
          b = b * 10 + num;
          if (b > 15) {
            remind = b & 0b1111;
            ans.push(b >> 4);
            b = remind;
          } else {
            ans.push(0 | 0);
            remind = b;
          }
        })

        // 頭の0をとる
        let i = 0;
        while (ans[i] == 0) {
          ++i;
        }
        numArray = ans.slice(i);
        hex.unshift(remind);
      }

      if (hex.length > 16) {
        throw new Error('64bit整数の範囲を超えています。');
      }

      // 桁揃え（16桁に）
      if (hex.length < 16) {
        let l = 16 - hex.length;
        while (l > 0) {
          hex.unshift(0);
          --l;
        }
      }

      // マイナス値の処理
      if (minus) {
        hex = hex.map(d => d ^ 0xf);
        hex[15] += 1;
        if (hex[15] > 15) {
          hex[15] = 0;
          for (let i = 14; i >= 0; --i) {
            hex[i] += 1;
            if (hex[i] < 16) {
              break;
            } else {
              hex[i] = 0;
            }
          }
        }
        hex[0] |= 0b1000;//sign bitを立てる 
      }
      return hex.map(d => d.toString(16)).join('').padStart(16, '0');
  	}

  	// 64ビット長の16進数文字列をHigh、Lowの2つの32ビット整数に分ける
  	function hexToInt64(hexString,sign){
        let low = parseInt(hexString.slice(-8),16) | 0;
        let high = parseInt(hexString.slice(0,-8),16) | 0;
        let value = {low:low,high:high};
        if(sign == '-'){
          lib.i64Neg(low,high);
          let ret = new Uint32Array(lib.memory.buffer);
          value.low = ret[0];
          value.high = ret[1];
        }
  			return value;
  	}

    // binaryen type情報の取得
    function getBinaryenType(type){
      return binaryen[type.name] || binaryen[type.innerType] || null;
    }

    // module type の取得
    function getModuleType(type){
      return wamModule[type.name] || module[type.innerType] || null;
    }

    // 
    function getStoreOp(left){
      let leftOp;
      switch (left.nodeType){
        case 'Identifier':
          let node = scope.find(left.name,false);
          if(!node) {
            error(`変数が定義されていません。`);
          } 
          leftOp = node.global ? wasmModule.setLocal.bind(wasmModule,node.index) : wasmModule.setGlobal.bind(wasmModule,node.index);
        break;
      }
      return leftOp;
    }

    function getLoadOp(node){
      let loadOp;
      switch (node.nodeType){
        case 'Identifier':
          let id = scope.find(node.name,false);
          if(!id) {
            error(`変数が定義されていません。`);
          } 
          loadOp = id.global ? wasmModule.getLocal.bind(wasmModule,id.index) : wasmModule.getGlobal.bind(wasmModule,id.index);
        break;
      }
      return loadOp;
    }


    function buildAssignmentOp(left,op,right){
      
      let op_ = getArithmeticOp(left.type,op);

      return getStoreOp(left)(
        op_(
          getLoadOp(left),right.wasmCode
        )
      );
    }

    function buildArithmeticOp(left,op,right)
    {
      return getArithmeticOp(left.type,op)(
        getLoadOp(left.wasmCode,right.wasmCode)
      );

    }  

    function getArithmeticOp(type,op){
      let op_ = arithmeticOps.get(op);
      !op_ && error(op + '演算子はこの言語ではサポートしていません。'); 

      if(type.unsigned) {
        op_ = op_.u;
        !op_ && error(op + '演算子は符号なし整数型はサポートしていません。'); 
      } else if(type.integer){
        op_ = op_.i;
        !op_ && error(op + '演算子は符号あり整数型はサポートしていません。'); 
      } else {
        op_ = op_.f;
        !op_ && error(op + '演算子は浮動小数点型はサポートしていません。'); 
      }

      return wasmModule[type.innerType][op_];

    }

    const arithmeticOps = new Map([
     ["*",{f:'mul',i:'mul',u:'mul'}],
     ["/",{f:'div',i:'div_s',u:'div_u'}],
     ["%",{f:'rem',i:'rem_s',u:'rem_u'}],
     ["+",{f:'add',i:'add',u:'add'}],
     ["-",{f:'sub',i:'sub',u:'sub'}],
     ["<<",{i:'shl',u:'shl'}],
     ["<<&",{i:'rotl',u:'rotl'}],
     [">>",{i:'shr_s'}],
     [">>&",{i:'rotr',u:'rotr'}],
     [">>>",{u:'shr_u'}],
     ["&",{i:'and',u:'and'}],
     ["^",{i:'xor',u:'xor'}],
     ["!",{i:'not',u:'not'}],
     ["|",{i:'or',u:'or'}]]);




  peg$result = peg$parseRule(peg$startRuleIndex);

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
